package Parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Scanner.Registros.*;

parser code
{:

    public ArrayList<String> errores = new ArrayList<String>();
    
    public TablaSimbolos tabla = TablaSimbolos.getInstance();
    public PilaSemantica pila = PilaSemantica.getInstance();

    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void guardarRSTipo(String tipo){
        RSTipo rsTipo = new RSTipo(tipo);
        this.pila.Push(rsTipo);
    }

    public void guardarRSVar(String ID, int linea, int columna){
        RSVar var = new RSVar(ID, linea, columna);
        this.pila.Push(var);
    }

    public void guardarAmbito(String ambito){
        this.pila.guardarVariable(ambito);
    }

    public void verificarAsignacion(String ID, int linea, int columna){
        this.pila.verificarAsignacion(ID, linea, columna);
    }

    public void verificarFuncion(String ID, int linea, int columna){
        this.pila.verificarFuncion(ID, linea, columna);
    }

    public void guardarOperador(String operador){
        RSOperador operadorRS = new RSOperador(operador);
        this.pila.Push(operadorRS);
    }

    public void guardarConstante(String numero, int linea, int columna){
        this.pila.constantFolding(numero, linea, columna);
    }

    public void startIf(){
        this.pila.startIf();
    }

    public void startWhile(){
        this.pila.startWhile();
    }

    public void endIf(){
        this.pila.endIf();
    }

    public void comprobarCiclo(String nombre, int linea, int columna){
        this.pila.comprobarCiclo(nombre, linea, columna);
    }

:};

terminal 
    Linea,
    Int,
    Break, 
    Case,
    Char,
    Const,
    Coma,
    Continue,
    Default,
    Do,
    For,
    Long,
    Return,
    Short,
    Switch,
    Void,
    While,           
    If,
    Else,
    Relacionales,
    Identificador,
    Literal,
    Parentesis_a,
    Parentesis_c,
    Corchete_a,
    Corchete_c,
    Llave_a,
    Llave_c,
    Main,
    Scolon,
    Numero,
    Asignacion,
    Or,
    And,
    Not,
    Mas,
    Menos,
    Timesslash,
    Unarios,
    Write,
    Read,
    Dos_puntos,
    LEX_ERROR
    ;

non  terminal INICIO, 
MAIN, 
DECLARACION_FUNCION, 
SENTENCIA, 
LLAMADA_FUNCION, 
DECLARACION_VAR, 
DECLARACION_VAR_AUX_LIST,
IF, 
IF_ELSE,
WHILE, 
DO_WHILE,
FOR,
PARAMS, 
PARAMS_AUX,
TIPO, 
LONG , 
SHORT,
EXP, 
SENTENCIA_BOOLEANA,
Op_booleano , 
SENTENCIA_FOR, 
DECLARACION_FOR, 
OPERADOR,OP_RELACIONALES , 
CONST_AUX , 
DECLARACION_VAR_AUX,
DECL_AUX,
PARAMS_LL_AUX,
PARAMS_LL,
LLAMADA_FUNCION_AUX,
PARAMS_PREV,
PARAMS_LL_PREV,
LINEA_AUX,
DECLARACIONES_INICIALES,
DECLARACIONES_INICIALES_AUX,
ASIGNACION_VAR,
DECLARACIONES_INICIALES_AUX_AUX,
SHORT_AUX,
SHORT_AUX_AUX,
LONG_AUX,
LONG_AUX_AUX,
CONTINUE,
LANG_FUNCS,
ARRAY_AUX,
ARRAY_AUX_AUX,
NUMERO_AUX,
ARRAY_EXP_AUX,
SW,
DEFAULT_AUX,
DEFAULT_OPTIONS,
CASE_AUX,
CASE_OPTIONS,
OPTIONS,
ARRAY_AUX_CONST,
RETURN_AUX_OPTIONS
;

precedence right Asignacion;
precedence left Or;
precedence left And;
precedence nonassoc Relacionales;
precedence left Mas, Menos;
precedence left Timesslash;
precedence right Not;

start with INICIO; 
DECLARACIONES_INICIALES::= DECLARACIONES_INICIALES Const TIPO Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Global"); :}  ARRAY_AUX_CONST Scolon |
                            DECLARACIONES_INICIALES TIPO Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); :}  DECLARACIONES_INICIALES_AUX |
                            DECLARACIONES_INICIALES Const TIPO error ARRAY_AUX_CONST Scolon|
                            DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
                            | ;

DECLARACIONES_INICIALES_AUX::= Scolon {: parser.guardarAmbito("Global"); :}
                                | Coma Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); :} DECLARACIONES_INICIALES_AUX
                                | Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR  SENTENCIA Llave_c {: parser.guardarAmbito("Funcion"); :}
                                | Parentesis_a PARAMS_PREV Parentesis_c Scolon {: parser.guardarAmbito("Funcion"); :}
                                | error Llave_a DECLARACION_VAR SENTENCIA Llave_c  
                                | ; 

INICIO::= DECLARACIONES_INICIALES MAIN ;

MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
        |TIPO Main Parentesis_a Parentesis_c error Llave_c| ;

LLAMADA_FUNCION::= Identificador:v1 Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon {: parser.verificarFuncion(v1.toString(),v1right +1,v1left +1); :}
                        | LANG_FUNCS ;

SENTENCIA::=    
                IF DECL_AUX |
                IF_ELSE DECL_AUX |
                WHILE DECL_AUX|
                DO_WHILE Scolon DECL_AUX |
                FOR DECL_AUX |
                SW DECL_AUX|
                LLAMADA_FUNCION DECL_AUX |
                ASIGNACION_VAR DECL_AUX|
                CONTINUE DECL_AUX |
                Return Numero Scolon DECL_AUX |
                Return RETURN_AUX_OPTIONS DECL_AUX|
                Break:v1 Scolon DECL_AUX {: parser.comprobarCiclo(v1.toString(),v1right +1,v1left +1); :}|
                Linea SENTENCIA |
                error DECL_AUX|                
                ;
ASIGNACION_VAR::= Identificador:v1 Asignacion {: parser.verificarAsignacion(v1.toString(),v1right +1,v1left +1); :} ARRAY_AUX_AUX Scolon |Identificador Asignacion error Scolon ;

DECL_AUX::= SENTENCIA  ;

CONST_AUX::= Const | ;

RETURN_AUX_OPTIONS::= Scolon | Identificador Scolon ;

DECLARACION_VAR::=  Const TIPO Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); :}  ARRAY_AUX_CONST Scolon DECLARACION_VAR 
                    | TIPO Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); :} ARRAY_AUX Scolon DECLARACION_VAR 
                    |    Const TIPO Identificador DECLARACION_VAR_AUX_LIST
                    |    ;


DECLARACION_VAR_AUX_LIST::= Scolon 
                            | Coma Identificador DECLARACION_VAR_AUX_LIST
                            | ;

ARRAY_AUX::= Corchete_a EXP Corchete_c  |Corchete_a  Corchete_c  | error | Coma Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); :} ARRAY_AUX | ;

ARRAY_AUX_CONST::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX  | Corchete_a  Corchete_c  Asignacion ARRAY_AUX_AUX  |  DECLARACION_VAR_AUX ;


DECLARACION_VAR_AUX::=  Asignacion EXP | Asignacion error  ;

ARRAY_AUX_AUX::= EXP | Llave_a  ARRAY_EXP_AUX   Llave_c ;

ARRAY_EXP_AUX::= EXP |  EXP Coma ARRAY_EXP_AUX;


IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a  SENTENCIA Llave_c |
       If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c |
        If Parentesis_a  SENTENCIA_BOOLEANA Parentesis_c error ;

SENTENCIA_BOOLEANA ::= EXP  |
                        Identificador OP_RELACIONALES EXP|
                         Identificador OP_RELACIONALES error;


OP_RELACIONALES::= Relacionales | And | Or | Not;

IF_ELSE::=  IF  Else Llave_a SENTENCIA Llave_c {: parser.endIf(); :}  | IF error Llave_a SENTENCIA Llave_c ;

WHILE::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c  Llave_a  SENTENCIA  Llave_c {: parser.startWhile(); :} | While Parentesis_a error  Parentesis_c  Llave_a  SENTENCIA  Llave_c  ;

DO_WHILE::= Do Llave_a  SENTENCIA  Llave_c  While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c |
            Do Llave_a  SENTENCIA  Llave_c  While Parentesis_a error Parentesis_c ;

CONTINUE::= Continue:v1 Scolon {: parser.comprobarCiclo(v1.toString(),v1right +1,v1left +1); :} ;

FOR::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c |
       For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c|
        For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c ;

SENTENCIA_FOR ::=
    TIPO Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local FOR"); :} Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR |
    Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR|
    error Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR
    

;

DECLARACION_FOR ::= 
    Identificador Asignacion Numero |
    Identificador Unarios | 
    Unarios Identificador|
    error
;
       
EXP::= EXP OPERADOR EXP | Parentesis_a EXP Parentesis_c | Identificador | Literal:v1 {: parser.guardarConstante(v1.toString(),v1right +1,v1left +1); :} | Numero | OPERADOR | Identificador Unarios ;

OPERADOR::= Mas:v1 {: parser.guardarOperador(v1.toString()); :} | Menos:v1 {: parser.guardarOperador(v1.toString()); :} | Timesslash:v1 {: parser.guardarOperador(v1.toString()); :} ;

PARAMS_PREV::= PARAMS | ;

PARAMS::= TIPO Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); :} PARAMS_AUX ;

PARAMS_AUX::= Coma PARAMS | ;

PARAMS_LL_PREV::= PARAMS_LL | ;

PARAMS_LL::= Identificador:v1 {: parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); :} PARAMS_LL_AUX ;

PARAMS_LL_AUX::= Coma PARAMS_LL | ;

TIPO::= Int {: parser.guardarRSTipo("int"); :} | Char {: parser.guardarRSTipo("char"); :} | Void {: parser.guardarRSTipo("void"); :} | SHORT | LONG;

SHORT::= Short SHORT_AUX ;

SHORT_AUX::= Int | Short SHORT_AUX_AUX ; 

SHORT_AUX_AUX::=  Int | ;

LONG::= Long LONG_AUX;

LONG_AUX::= Int {: parser.guardarRSTipo("int"); :} | Long LONG_AUX_AUX;

LONG_AUX_AUX::= Int {: parser.guardarRSTipo("int"); :}| ;

LANG_FUNCS ::=Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon| Write Parentesis_a PARAMS_LL Parentesis_c Scolon  ;

SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a 
     CASE_AUX
    DEFAULT_AUX
Llave_c;

DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS | Default error DEFAULT_OPTIONS | ; 

DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c | SENTENCIA;

CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS| CASE_AUX Case error CASE_OPTIONS | ;

CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c | SENTENCIA ;

OPTIONS::= Literal | Identificador | Identificador Asignacion Literal ;
