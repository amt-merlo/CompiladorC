
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 27 12:44:07 CST 2022
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Scanner.Registros.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 27 12:44:07 CST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\071\002\000\002\043" +
    "\011\000\002\072\002\000\002\043\007\000\002\043\010" +
    "\000\002\043\006\000\002\043\002\000\002\044\003\000" +
    "\002\073\002\000\002\044\006\000\002\044\011\000\002" +
    "\044\006\000\002\044\007\000\002\044\002\000\002\002" +
    "\004\000\002\074\002\000\002\003\013\000\002\003\010" +
    "\000\002\003\002\000\002\006\007\000\002\006\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\002\000\002\075\002\000\002" +
    "\045\007\000\002\045\006\000\002\034\003\000\002\032" +
    "\003\000\002\032\002\000\002\070\003\000\002\070\004" +
    "\000\002\076\002\000\002\007\011\000\002\077\002\000" +
    "\002\007\010\000\002\007\006\000\002\007\002\000\002" +
    "\010\003\000\002\010\005\000\002\010\002\000\002\055" +
    "\005\000\002\055\004\000\002\055\003\000\002\100\002" +
    "\000\002\055\006\000\002\055\002\000\002\067\007\000" +
    "\002\067\006\000\002\067\003\000\002\033\004\000\002" +
    "\033\004\000\002\056\003\000\002\056\005\000\002\060" +
    "\003\000\002\060\005\000\002\011\011\000\002\011\011" +
    "\000\002\011\007\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\012\007\000\002\012" +
    "\007\000\002\013\011\000\002\013\011\000\002\014\012" +
    "\000\002\014\012\000\002\053\004\000\002\015\011\000" +
    "\002\015\011\000\002\015\011\000\002\101\002\000\002" +
    "\026\013\000\002\026\011\000\002\026\007\000\002\027" +
    "\005\000\002\027\004\000\002\027\004\000\002\027\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\040\003\000\002\040\002\000\002\102\002" +
    "\000\002\016\006\000\002\017\004\000\002\017\002\000" +
    "\002\041\003\000\002\041\002\000\002\103\002\000\002" +
    "\036\005\000\002\035\004\000\002\035\002\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\022\004\000\002\047\003\000" +
    "\002\047\004\000\002\050\003\000\002\050\002\000\002" +
    "\021\004\000\002\051\003\000\002\051\004\000\002\052" +
    "\003\000\002\052\002\000\002\054\007\000\002\054\007" +
    "\000\002\061\012\000\002\062\005\000\002\062\005\000" +
    "\002\062\002\000\002\063\005\000\002\063\003\000\002" +
    "\064\007\000\002\064\006\000\002\064\002\000\002\065" +
    "\005\000\002\065\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\020\002\ufffa\005\ufffa\010\ufffa\011\ufffa\017" +
    "\ufffa\021\ufffa\023\ufffa\001\002\000\004\002\u0144\001\002" +
    "\000\020\002\uffee\005\013\010\012\011\007\017\014\021" +
    "\006\023\016\001\002\000\006\005\u0141\021\u0140\001\002" +
    "\000\014\005\013\010\012\017\014\021\006\023\016\001" +
    "\002\000\010\003\uff86\030\uff86\040\uff86\001\002\000\004" +
    "\002\ufff2\001\002\000\010\003\uff89\030\uff89\040\uff89\001" +
    "\002\000\010\003\uff8a\030\uff8a\040\uff8a\001\002\000\006" +
    "\005\u0134\017\u0133\001\002\000\010\003\020\030\021\040" +
    "\022\001\002\000\010\003\uff88\030\uff88\040\uff88\001\002" +
    "\000\010\003\uff87\030\uff87\040\uff87\001\002\000\030\002" +
    "\ufff3\003\u011b\005\ufff3\010\ufff3\011\ufff3\012\u011a\017\ufff3" +
    "\021\ufff3\023\ufff3\032\u0117\041\u0119\001\002\000\030\002" +
    "\ufffe\003\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe\017\ufffe" +
    "\021\ufffe\023\ufffe\032\ufffe\041\ufffe\001\002\000\004\032" +
    "\023\001\002\000\004\033\024\001\002\000\006\003\026" +
    "\036\025\001\002\000\052\003\uffcf\004\uffcf\005\013\006" +
    "\uffcf\010\012\011\030\013\uffcf\015\uffcf\016\uffcf\017\014" +
    "\020\uffcf\021\006\022\uffcf\023\016\024\uffcf\025\uffcf\030" +
    "\uffcf\037\uffcf\053\uffcf\054\uffcf\001\002\000\004\037\027" +
    "\001\002\000\004\002\uffef\001\002\000\014\005\013\010" +
    "\012\017\014\021\006\023\016\001\002\000\036\003\ufff1" +
    "\004\ufff1\006\ufff1\013\ufff1\015\ufff1\016\ufff1\020\ufff1\022" +
    "\ufff1\024\ufff1\025\ufff1\030\ufff1\037\ufff1\053\ufff1\054\ufff1" +
    "\001\002\000\004\030\033\001\002\000\012\003\uffd2\012" +
    "\uffd2\034\uffd2\041\uffd2\001\002\000\012\003\036\012\035" +
    "\034\037\041\uffc6\001\002\000\004\030\063\001\002\000" +
    "\004\041\uffc9\001\002\000\022\030\050\031\044\032\047" +
    "\035\046\042\052\047\054\050\045\051\051\001\002\000" +
    "\004\041\041\001\002\000\052\003\uffcf\004\uffcf\005\013" +
    "\006\uffcf\010\012\011\030\013\uffcf\015\uffcf\016\uffcf\017" +
    "\014\020\uffcf\021\006\022\uffcf\023\016\024\uffcf\025\uffcf" +
    "\030\uffcf\037\uffcf\053\uffcf\054\uffcf\001\002\000\036\003" +
    "\uffd1\004\uffd1\006\uffd1\013\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\022\uffd1\024\uffd1\025\uffd1\030\uffd1\037\uffd1\053\uffd1\054" +
    "\uffd1\001\002\000\022\012\uff9b\033\uff9b\035\uff9b\037\uff9b" +
    "\041\uff9b\047\uff9b\050\uff9b\051\uff9b\001\002\000\022\012" +
    "\uff9d\033\uff9d\035\uff9d\037\uff9d\041\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\001\002\000\032\012\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\035\uff98\037\uff98\041\uff98\042\uff98\047\uff98" +
    "\050\uff98\051\uff98\001\002\000\004\041\uffca\001\002\000" +
    "\020\030\050\031\044\032\047\042\052\047\054\050\045" +
    "\051\051\001\002\000\024\012\uff9e\033\uff9e\035\uff9e\037" +
    "\uff9e\041\uff9e\047\uff9e\050\uff9e\051\uff9e\052\060\001\002" +
    "\000\032\012\uff97\030\uff97\031\uff97\032\uff97\033\uff97\035" +
    "\uff97\037\uff97\041\uff97\042\uff97\047\uff97\050\uff97\051\uff97" +
    "\001\002\000\022\012\uff9c\033\uff9c\035\uff9c\037\uff9c\041" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\001\002\000\012\035\055" +
    "\047\054\050\045\051\051\001\002\000\032\012\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\035\uff99\037\uff99\041\uff99" +
    "\042\uff99\047\uff99\050\uff99\051\uff99\001\002\000\004\041" +
    "\uffcb\001\002\000\020\030\050\031\044\032\047\042\052" +
    "\047\054\050\045\051\051\001\002\000\022\012\uffa0\033" +
    "\uffa0\035\uffa0\037\uffa0\041\uffa0\047\054\050\045\051\051" +
    "\001\002\000\022\012\uff9a\033\uff9a\035\uff9a\037\uff9a\041" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\001\002\000\012\033\062" +
    "\047\054\050\045\051\051\001\002\000\022\012\uff9f\033" +
    "\uff9f\035\uff9f\037\uff9f\041\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\001\002\000\012\003\uffc8\012\uffc8\034\uffc8\041\uffc8\001" +
    "\002\000\012\003\036\012\035\034\037\041\uffc6\001\002" +
    "\000\004\041\uffc7\001\002\000\036\003\111\004\107\006" +
    "\076\013\067\015\113\016\072\020\110\022\112\024\115" +
    "\025\106\030\100\037\uffdd\053\070\054\116\001\002\000" +
    "\004\041\376\001\002\000\004\032\372\001\002\000\042" +
    "\003\111\004\107\006\076\007\uffdd\013\067\014\uffdd\015" +
    "\113\016\072\020\110\022\112\024\115\025\106\030\100" +
    "\037\uffdd\053\070\054\116\001\002\000\004\032\320\001" +
    "\002\000\042\003\111\004\107\006\076\007\uffdd\013\067" +
    "\014\uffdd\015\113\016\072\020\110\022\112\024\115\025" +
    "\106\030\100\037\uffdd\053\070\054\116\001\002\000\042" +
    "\003\111\004\107\006\076\007\uffdd\013\067\014\uffdd\015" +
    "\113\016\072\020\110\022\112\024\115\025\106\030\100" +
    "\037\uffdd\053\070\054\116\001\002\000\004\037\315\001" +
    "\002\000\004\041\313\001\002\000\042\003\uffec\004\uffec" +
    "\006\uffec\007\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020" +
    "\uffec\022\uffec\024\uffec\025\uffec\030\uffec\037\uffec\053\uffec" +
    "\054\uffec\001\002\000\006\032\272\043\273\001\002\000" +
    "\044\003\263\004\107\006\076\007\uffdd\013\067\014\uffdd" +
    "\015\113\016\072\020\110\022\112\024\115\025\106\026" +
    "\261\030\100\037\uffdd\053\070\054\116\001\002\000\042" +
    "\003\111\004\107\006\076\007\uffdd\013\067\014\uffdd\015" +
    "\113\016\072\020\110\022\112\024\115\025\106\030\100" +
    "\037\uffdd\053\070\054\116\001\002\000\042\003\111\004" +
    "\107\006\076\007\uffdd\013\067\014\uffdd\015\113\016\072" +
    "\020\110\022\112\024\115\025\106\030\100\037\uffdd\053" +
    "\070\054\116\001\002\000\042\003\111\004\107\006\076" +
    "\007\uffdd\013\067\014\uffdd\015\113\016\072\020\110\022" +
    "\112\024\115\025\106\030\100\037\uffdd\053\070\054\116" +
    "\001\002\000\004\041\254\001\002\000\004\032\240\001" +
    "\002\000\042\003\111\004\107\006\076\007\uffdd\013\067" +
    "\014\uffdd\015\113\016\072\020\110\022\112\024\115\025" +
    "\106\030\100\037\uffdd\053\070\054\116\001\002\000\010" +
    "\030\231\041\230\042\227\001\002\000\042\003\111\004" +
    "\107\006\076\007\uffdd\013\067\014\uffdd\015\113\016\072" +
    "\020\110\022\112\024\115\025\106\030\100\037\uffdd\053" +
    "\070\054\116\001\002\000\004\032\170\001\002\000\004" +
    "\036\157\001\002\000\042\003\111\004\107\006\076\007" +
    "\uffdd\013\067\014\uffdd\015\113\016\072\020\110\022\112" +
    "\024\115\025\106\030\100\037\uffdd\053\070\054\116\001" +
    "\002\000\004\032\131\001\002\000\004\032\117\001\002" +
    "\000\006\030\122\033\uff8f\001\002\000\004\033\127\001" +
    "\002\000\004\033\uff90\001\002\000\006\012\uff8e\033\uff8e" +
    "\001\002\000\006\012\125\033\uff8b\001\002\000\004\033" +
    "\uff8d\001\002\000\004\030\122\001\002\000\004\033\uff8c" +
    "\001\002\000\004\041\130\001\002\000\042\003\uff7b\004" +
    "\uff7b\006\uff7b\007\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\020\uff7b\022\uff7b\024\uff7b\025\uff7b\030\uff7b\037\uff7b\053" +
    "\uff7b\054\uff7b\001\002\000\022\003\133\030\132\031\044" +
    "\032\047\042\052\047\054\050\045\051\051\001\002\000" +
    "\026\027\146\033\uff9e\041\uff9e\044\152\045\150\046\147" +
    "\047\uff9e\050\uff9e\051\uff9e\052\060\001\002\000\004\033" +
    "\142\001\002\000\004\033\136\001\002\000\014\033\uffb9" +
    "\041\uffb9\047\054\050\045\051\051\001\002\000\004\036" +
    "\137\001\002\000\036\003\111\004\107\006\076\013\067" +
    "\015\113\016\072\020\110\022\112\024\115\025\106\030" +
    "\100\037\uffdd\053\070\054\116\001\002\000\004\037\141" +
    "\001\002\000\042\003\uffb0\004\uffb0\006\uffb0\007\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\022\uffb0\024\uffb0" +
    "\025\uffb0\030\uffb0\037\uffb0\053\uffb0\054\uffb0\001\002\000" +
    "\004\036\143\001\002\000\036\003\111\004\107\006\076" +
    "\013\067\015\113\016\072\020\110\022\112\024\115\025" +
    "\106\030\100\037\uffdd\053\070\054\116\001\002\000\004" +
    "\037\145\001\002\000\042\003\uffaf\004\uffaf\006\uffaf\007" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf" +
    "\024\uffaf\025\uffaf\030\uffaf\037\uffaf\053\uffaf\054\uffaf\001" +
    "\002\000\022\003\uffb6\030\uffb6\031\uffb6\032\uffb6\042\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\001\002\000\022\003\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\042\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\001\002\000\022\003\uffb5\030\uffb5\031\uffb5\032\uffb5\042" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\022\003\153" +
    "\030\050\031\044\032\047\042\052\047\054\050\045\051" +
    "\051\001\002\000\022\003\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\042\uffb4\047\uffb4\050\uffb4\051\uffb4\001\002\000\006\033" +
    "\uffb7\041\uffb7\001\002\000\014\033\uffb8\041\uffb8\047\054" +
    "\050\045\051\051\001\002\000\010\007\uffe7\014\uffe7\037" +
    "\uffe7\001\002\000\010\007\uffd9\014\uffd9\037\uffd9\001\002" +
    "\000\036\003\111\004\107\006\076\013\067\015\113\016" +
    "\072\020\110\022\112\024\115\025\106\030\100\037\uffdd" +
    "\053\070\054\116\001\002\000\004\037\161\001\002\000" +
    "\004\024\162\001\002\000\004\032\163\001\002\000\022" +
    "\003\164\030\132\031\044\032\047\042\052\047\054\050" +
    "\045\051\051\001\002\000\004\033\167\001\002\000\004" +
    "\033\166\001\002\000\004\041\uffae\001\002\000\004\041" +
    "\uffad\001\002\000\006\030\172\031\171\001\002\000\004" +
    "\033\uff6e\001\002\000\006\033\uff6d\043\224\001\002\000" +
    "\004\033\174\001\002\000\004\036\175\001\002\000\010" +
    "\007\uff71\014\uff71\037\uff71\001\002\000\010\007\177\014" +
    "\200\037\uff76\001\002\000\006\003\214\031\213\001\002" +
    "\000\006\003\203\055\204\001\002\000\004\037\202\001" +
    "\002\000\042\003\uff79\004\uff79\006\uff79\007\uff79\013\uff79" +
    "\014\uff79\015\uff79\016\uff79\020\uff79\022\uff79\024\uff79\025" +
    "\uff79\030\uff79\037\uff79\053\uff79\054\uff79\001\002\000\040" +
    "\003\111\004\107\006\076\013\067\015\113\016\072\020" +
    "\110\022\112\024\115\025\106\030\100\036\207\037\uffdd" +
    "\053\070\054\116\001\002\000\040\003\111\004\107\006" +
    "\076\013\067\015\113\016\072\020\110\022\112\024\115" +
    "\025\106\030\100\036\207\037\uffdd\053\070\054\116\001" +
    "\002\000\004\037\uff78\001\002\000\004\037\uff74\001\002" +
    "\000\036\003\111\004\107\006\076\013\067\015\113\016" +
    "\072\020\110\022\112\024\115\025\106\030\100\037\uffdd" +
    "\053\070\054\116\001\002\000\004\037\211\001\002\000" +
    "\004\037\uff75\001\002\000\004\037\uff77\001\002\000\004" +
    "\055\222\001\002\000\044\003\111\004\107\006\076\007" +
    "\uffdd\013\067\014\uffdd\015\113\016\072\020\110\022\112" +
    "\024\115\025\106\030\100\036\216\037\uffdd\053\070\054" +
    "\116\001\002\000\010\007\uff6f\014\uff6f\037\uff6f\001\002" +
    "\000\036\003\111\004\107\006\076\013\067\015\113\016" +
    "\072\020\110\022\112\024\115\025\106\030\100\037\uffdd" +
    "\053\070\054\116\001\002\000\010\007\uff72\014\uff72\037" +
    "\uff72\001\002\000\004\037\221\001\002\000\010\007\uff70" +
    "\014\uff70\037\uff70\001\002\000\044\003\111\004\107\006" +
    "\076\007\uffdd\013\067\014\uffdd\015\113\016\072\020\110" +
    "\022\112\024\115\025\106\030\100\036\216\037\uffdd\053" +
    "\070\054\116\001\002\000\010\007\uff73\014\uff73\037\uff73" +
    "\001\002\000\004\031\225\001\002\000\004\033\uff6c\001" +
    "\002\000\010\007\uffde\014\uffde\037\uffde\001\002\000\004" +
    "\041\235\001\002\000\042\003\uffd6\004\uffd6\006\uffd6\007" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6" +
    "\024\uffd6\025\uffd6\030\uffd6\037\uffd6\053\uffd6\054\uffd6\001" +
    "\002\000\004\041\234\001\002\000\042\003\111\004\107" +
    "\006\076\007\uffdd\013\067\014\uffdd\015\113\016\072\020" +
    "\110\022\112\024\115\025\106\030\100\037\uffdd\053\070" +
    "\054\116\001\002\000\010\007\uffe1\014\uffe1\037\uffe1\001" +
    "\002\000\042\003\uffd5\004\uffd5\006\uffd5\007\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022\uffd5\024\uffd5\025" +
    "\uffd5\030\uffd5\037\uffd5\053\uffd5\054\uffd5\001\002\000\042" +
    "\003\111\004\107\006\076\007\uffdd\013\067\014\uffdd\015" +
    "\113\016\072\020\110\022\112\024\115\025\106\030\100" +
    "\037\uffdd\053\070\054\116\001\002\000\010\007\uffe2\014" +
    "\uffe2\037\uffe2\001\002\000\010\007\uffdf\014\uffdf\037\uffdf" +
    "\001\002\000\022\003\241\030\132\031\044\032\047\042" +
    "\052\047\054\050\045\051\051\001\002\000\004\033\250" +
    "\001\002\000\004\033\243\001\002\000\006\003\245\036" +
    "\244\001\002\000\036\003\111\004\107\006\076\013\067" +
    "\015\113\016\072\020\110\022\112\024\115\025\106\030" +
    "\100\037\uffdd\053\070\054\116\001\002\000\044\003\uffba" +
    "\004\uffba\006\uffba\007\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\020\uffba\022\uffba\024\uffba\025\uffba\026\uffba\030\uffba" +
    "\037\uffba\053\uffba\054\uffba\001\002\000\004\037\247\001" +
    "\002\000\044\003\uffbc\004\uffbc\006\uffbc\007\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\030\uffbc\037\uffbc\053\uffbc\054\uffbc\001\002" +
    "\000\004\036\251\001\002\000\036\003\111\004\107\006" +
    "\076\013\067\015\113\016\072\020\110\022\112\024\115" +
    "\025\106\030\100\037\uffdd\053\070\054\116\001\002\000" +
    "\004\037\253\001\002\000\044\003\uffbb\004\uffbb\006\uffbb" +
    "\007\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\022" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb\037\uffbb\053\uffbb" +
    "\054\uffbb\001\002\000\042\003\111\004\107\006\076\007" +
    "\uffdd\013\067\014\uffdd\015\113\016\072\020\110\022\112" +
    "\024\115\025\106\030\100\037\uffdd\053\070\054\116\001" +
    "\002\000\010\007\uffe8\014\uffe8\037\uffe8\001\002\000\010" +
    "\007\uffea\014\uffea\037\uffea\001\002\000\010\007\uffe6\014" +
    "\uffe6\037\uffe6\001\002\000\010\007\uffe5\014\uffe5\037\uffe5" +
    "\001\002\000\004\036\267\001\002\000\010\007\uffeb\014" +
    "\uffeb\037\uffeb\001\002\000\044\003\111\004\107\006\076" +
    "\007\uffdd\013\067\014\uffdd\015\113\016\072\020\110\022" +
    "\112\024\115\025\106\030\100\036\264\037\uffdd\053\070" +
    "\054\116\001\002\000\036\003\111\004\107\006\076\013" +
    "\067\015\113\016\072\020\110\022\112\024\115\025\106" +
    "\030\100\037\uffdd\053\070\054\116\001\002\000\004\037" +
    "\266\001\002\000\042\003\uffb1\004\uffb1\006\uffb1\007\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1\022\uffb1\024" +
    "\uffb1\025\uffb1\030\uffb1\037\uffb1\053\uffb1\054\uffb1\001\002" +
    "\000\036\003\111\004\107\006\076\013\067\015\113\016" +
    "\072\020\110\022\112\024\115\025\106\030\100\037\uffdd" +
    "\053\070\054\116\001\002\000\004\037\271\001\002\000" +
    "\042\003\uffb2\004\uffb2\006\uffb2\007\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\020\uffb2\022\uffb2\024\uffb2\025\uffb2\030" +
    "\uffb2\037\uffb2\053\uffb2\054\uffb2\001\002\000\006\030\122" +
    "\033\uff8f\001\002\000\024\003\274\030\uffdc\031\uffdc\032" +
    "\uffdc\036\uffdc\042\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\004\041\307\001\002\000\022\030\050\031\044\032" +
    "\047\036\277\042\052\047\054\050\045\051\051\001\002" +
    "\000\004\041\306\001\002\000\020\030\050\031\044\032" +
    "\047\042\052\047\054\050\045\051\051\001\002\000\012" +
    "\041\uffc0\047\054\050\045\051\051\001\002\000\004\037" +
    "\305\001\002\000\014\012\303\037\uffbe\047\054\050\045" +
    "\051\051\001\002\000\020\030\050\031\044\032\047\042" +
    "\052\047\054\050\045\051\051\001\002\000\004\037\uffbd" +
    "\001\002\000\004\041\uffbf\001\002\000\042\003\uffdb\004" +
    "\uffdb\006\uffdb\007\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\020\uffdb\022\uffdb\024\uffdb\025\uffdb\030\uffdb\037\uffdb\053" +
    "\uffdb\054\uffdb\001\002\000\042\003\uffda\004\uffda\006\uffda" +
    "\007\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\022" +
    "\uffda\024\uffda\025\uffda\030\uffda\037\uffda\053\uffda\054\uffda" +
    "\001\002\000\004\033\311\001\002\000\004\041\312\001" +
    "\002\000\042\003\uffed\004\uffed\006\uffed\007\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\020\uffed\022\uffed\024\uffed\025" +
    "\uffed\030\uffed\037\uffed\053\uffed\054\uffed\001\002\000\042" +
    "\003\111\004\107\006\076\007\uffdd\013\067\014\uffdd\015" +
    "\113\016\072\020\110\022\112\024\115\025\106\030\100" +
    "\037\uffdd\053\070\054\116\001\002\000\010\007\uffe0\014" +
    "\uffe0\037\uffe0\001\002\000\004\002\ufff0\001\002\000\010" +
    "\007\uffe4\014\uffe4\037\uffe4\001\002\000\010\007\uffe9\014" +
    "\uffe9\037\uffe9\001\002\000\020\003\324\005\013\010\012" +
    "\017\014\021\006\023\016\030\323\001\002\000\004\033" +
    "\362\001\002\000\004\030\352\001\002\000\004\043\344" +
    "\001\002\000\006\033\326\041\325\001\002\000\020\030" +
    "\132\031\044\032\047\042\052\047\054\050\045\051\051" +
    "\001\002\000\004\036\327\001\002\000\036\003\111\004" +
    "\107\006\076\013\067\015\113\016\072\020\110\022\112" +
    "\024\115\025\106\030\100\037\uffdd\053\070\054\116\001" +
    "\002\000\004\037\331\001\002\000\042\003\uffaa\004\uffaa" +
    "\006\uffaa\007\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\020" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\030\uffaa\037\uffaa\053\uffaa" +
    "\054\uffaa\001\002\000\004\041\333\001\002\000\010\003" +
    "\336\030\337\052\334\001\002\000\004\030\343\001\002" +
    "\000\004\033\uffa5\001\002\000\004\033\uffa1\001\002\000" +
    "\006\043\341\052\340\001\002\000\004\033\uffa3\001\002" +
    "\000\004\042\342\001\002\000\004\033\uffa4\001\002\000" +
    "\004\033\uffa2\001\002\000\020\030\050\031\044\032\047" +
    "\042\052\047\054\050\045\051\051\001\002\000\012\041" +
    "\346\047\054\050\045\051\051\001\002\000\020\030\132" +
    "\031\044\032\047\042\052\047\054\050\045\051\051\001" +
    "\002\000\004\041\350\001\002\000\010\003\336\030\337" +
    "\052\334\001\002\000\004\033\uffa6\001\002\000\004\043" +
    "\uffa8\001\002\000\004\043\354\001\002\000\020\030\050" +
    "\031\044\032\047\042\052\047\054\050\045\051\051\001" +
    "\002\000\012\041\356\047\054\050\045\051\051\001\002" +
    "\000\020\030\132\031\044\032\047\042\052\047\054\050" +
    "\045\051\051\001\002\000\004\041\360\001\002\000\010" +
    "\003\336\030\337\052\334\001\002\000\004\033\uffa7\001" +
    "\002\000\006\003\364\036\363\001\002\000\036\003\111" +
    "\004\107\006\076\013\067\015\113\016\072\020\110\022" +
    "\112\024\115\025\106\030\100\037\uffdd\053\070\054\116" +
    "\001\002\000\036\003\111\004\107\006\076\013\067\015" +
    "\113\016\072\020\110\022\112\024\115\025\106\030\100" +
    "\037\uffdd\053\070\054\116\001\002\000\004\037\366\001" +
    "\002\000\042\003\uffa9\004\uffa9\006\uffa9\007\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\020\uffa9\022\uffa9\024\uffa9\025" +
    "\uffa9\030\uffa9\037\uffa9\053\uffa9\054\uffa9\001\002\000\004" +
    "\037\370\001\002\000\042\003\uffab\004\uffab\006\uffab\007" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\020\uffab\022\uffab" +
    "\024\uffab\025\uffab\030\uffab\037\uffab\053\uffab\054\uffab\001" +
    "\002\000\010\007\uffe3\014\uffe3\037\uffe3\001\002\000\004" +
    "\030\122\001\002\000\004\033\374\001\002\000\004\041" +
    "\375\001\002\000\042\003\uff7a\004\uff7a\006\uff7a\007\uff7a" +
    "\013\uff7a\014\uff7a\015\uff7a\016\uff7a\020\uff7a\022\uff7a\024" +
    "\uff7a\025\uff7a\030\uff7a\037\uff7a\053\uff7a\054\uff7a\001\002" +
    "\000\042\003\uffac\004\uffac\006\uffac\007\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\020\uffac\022\uffac\024\uffac\025\uffac" +
    "\030\uffac\037\uffac\053\uffac\054\uffac\001\002\000\004\030" +
    "\u0100\001\002\000\046\003\uffcc\004\uffcc\006\uffcc\012\u0102" +
    "\013\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024\uffcc\025" +
    "\uffcc\030\uffcc\034\uffd4\037\uffcc\041\u0101\043\uffd4\053\uffcc" +
    "\054\uffcc\001\002\000\036\003\uffce\004\uffce\006\uffce\013" +
    "\uffce\015\uffce\016\uffce\020\uffce\022\uffce\024\uffce\025\uffce" +
    "\030\uffce\037\uffce\053\uffce\054\uffce\001\002\000\004\030" +
    "\u0114\001\002\000\036\003\uffd0\004\uffd0\006\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\020\uffd0\022\uffd0\024\uffd0\025\uffd0\030" +
    "\uffd0\037\uffd0\053\uffd0\054\uffd0\001\002\000\006\034\u0106" +
    "\043\u0107\001\002\000\004\041\uffc3\001\002\000\022\030" +
    "\050\031\044\032\047\035\u010d\042\052\047\054\050\045" +
    "\051\051\001\002\000\022\003\u010b\030\050\031\044\032" +
    "\047\042\052\047\054\050\045\051\051\001\002\000\004" +
    "\041\u0109\001\002\000\052\003\uffcf\004\uffcf\005\013\006" +
    "\uffcf\010\012\011\030\013\uffcf\015\uffcf\016\uffcf\017\014" +
    "\020\uffcf\021\006\022\uffcf\023\016\024\uffcf\025\uffcf\030" +
    "\uffcf\037\uffcf\053\uffcf\054\uffcf\001\002\000\036\003\uffd3" +
    "\004\uffd3\006\uffd3\013\uffd3\015\uffd3\016\uffd3\020\uffd3\022" +
    "\uffd3\024\uffd3\025\uffd3\030\uffd3\037\uffd3\053\uffd3\054\uffd3" +
    "\001\002\000\004\041\uffc1\001\002\000\012\041\uffc2\047" +
    "\054\050\045\051\051\001\002\000\004\043\u0112\001\002" +
    "\000\012\035\u010f\047\054\050\045\051\051\001\002\000" +
    "\004\043\u0110\001\002\000\022\030\050\031\044\032\047" +
    "\036\277\042\052\047\054\050\045\051\051\001\002\000" +
    "\004\041\uffc5\001\002\000\022\030\050\031\044\032\047" +
    "\036\277\042\052\047\054\050\045\051\051\001\002\000" +
    "\004\041\uffc4\001\002\000\042\003\uffcc\004\uffcc\006\uffcc" +
    "\012\u0102\013\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024" +
    "\uffcc\025\uffcc\030\uffcc\037\uffcc\041\u0101\053\uffcc\054\uffcc" +
    "\001\002\000\036\003\uffcd\004\uffcd\006\uffcd\013\uffcd\015" +
    "\uffcd\016\uffcd\020\uffcd\022\uffcd\024\uffcd\025\uffcd\030\uffcd" +
    "\037\uffcd\053\uffcd\054\uffcd\001\002\000\030\002\ufff3\003" +
    "\u011b\005\ufff3\010\ufff3\011\ufff3\012\u011a\017\ufff3\021\ufff3" +
    "\023\ufff3\032\u0117\041\u0119\001\002\000\016\005\013\010" +
    "\012\017\014\021\006\023\016\033\uff95\001\002\000\020" +
    "\002\ufffd\005\ufffd\010\ufffd\011\ufffd\017\ufffd\021\ufffd\023" +
    "\ufffd\001\002\000\020\002\ufff9\005\ufff9\010\ufff9\011\ufff9" +
    "\017\ufff9\021\ufff9\023\ufff9\001\002\000\004\030\u0120\001" +
    "\002\000\004\036\u011c\001\002\000\052\003\uffcf\004\uffcf" +
    "\005\013\006\uffcf\010\012\011\030\013\uffcf\015\uffcf\016" +
    "\uffcf\017\014\020\uffcf\021\006\022\uffcf\023\016\024\uffcf" +
    "\025\uffcf\030\uffcf\037\uffcf\053\uffcf\054\uffcf\001\002\000" +
    "\036\003\111\004\107\006\076\013\067\015\113\016\072" +
    "\020\110\022\112\024\115\025\106\030\100\037\uffdd\053" +
    "\070\054\116\001\002\000\004\037\u011f\001\002\000\020" +
    "\002\ufff4\005\ufff4\010\ufff4\011\ufff4\017\ufff4\021\ufff4\023" +
    "\ufff4\001\002\000\030\002\ufff8\003\ufff8\005\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\017\ufff8\021\ufff8\023\ufff8\032\ufff8\041" +
    "\ufff8\001\002\000\030\002\ufff3\003\u011b\005\ufff3\010\ufff3" +
    "\011\ufff3\012\u011a\017\ufff3\021\ufff3\023\ufff3\032\u0117\041" +
    "\u0119\001\002\000\020\002\ufff7\005\ufff7\010\ufff7\011\ufff7" +
    "\017\ufff7\021\ufff7\023\ufff7\001\002\000\004\033\uff96\001" +
    "\002\000\004\033\u012b\001\002\000\004\030\u0126\001\002" +
    "\000\006\012\uff94\033\uff94\001\002\000\006\012\u0129\033" +
    "\uff91\001\002\000\004\033\uff93\001\002\000\014\005\013" +
    "\010\012\017\014\021\006\023\016\001\002\000\004\033" +
    "\uff92\001\002\000\006\036\u012c\041\u012d\001\002\000\052" +
    "\003\uffcf\004\uffcf\005\013\006\uffcf\010\012\011\030\013" +
    "\uffcf\015\uffcf\016\uffcf\017\014\020\uffcf\021\006\022\uffcf" +
    "\023\016\024\uffcf\025\uffcf\030\uffcf\037\uffcf\053\uffcf\054" +
    "\uffcf\001\002\000\020\002\ufff5\005\ufff5\010\ufff5\011\ufff5" +
    "\017\ufff5\021\ufff5\023\ufff5\001\002\000\036\003\111\004" +
    "\107\006\076\013\067\015\113\016\072\020\110\022\112" +
    "\024\115\025\106\030\100\037\uffdd\053\070\054\116\001" +
    "\002\000\004\037\u0130\001\002\000\020\002\ufff6\005\ufff6" +
    "\010\ufff6\011\ufff6\017\ufff6\021\ufff6\023\ufff6\001\002\000" +
    "\020\002\ufffb\005\ufffb\010\ufffb\011\ufffb\017\ufffb\021\ufffb" +
    "\023\ufffb\001\002\000\010\003\uff80\030\uff80\040\uff80\001" +
    "\002\000\012\003\uff7c\005\u0136\030\uff7c\040\uff7c\001\002" +
    "\000\010\003\uff7f\030\uff7f\040\uff7f\001\002\000\010\003" +
    "\uff7e\030\uff7e\040\uff7e\001\002\000\010\003\uff7d\030\uff7d" +
    "\040\uff7d\001\002\000\006\003\u0138\030\u0139\001\002\000" +
    "\006\034\u0106\043\u0107\001\002\000\006\034\000\043\000" +
    "\001\002\000\006\034\u0106\043\u0107\001\002\000\004\041" +
    "\u013c\001\002\000\020\002\uffff\005\uffff\010\uffff\011\uffff" +
    "\017\uffff\021\uffff\023\uffff\001\002\000\004\041\u013e\001" +
    "\002\000\020\002\ufffc\005\ufffc\010\ufffc\011\ufffc\017\ufffc" +
    "\021\ufffc\023\ufffc\001\002\000\010\003\uff85\030\uff85\040" +
    "\uff85\001\002\000\012\003\uff81\005\u0143\030\uff81\040\uff81" +
    "\001\002\000\010\003\uff84\030\uff84\040\uff84\001\002\000" +
    "\010\003\uff83\030\uff83\040\uff83\001\002\000\010\003\uff82" +
    "\030\uff82\040\uff82\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\006\002\003\043\004\001\001\000\002\001" +
    "\001\000\012\003\010\020\014\021\007\022\016\001\001" +
    "\000\004\047\u013e\001\001\000\010\020\u0136\021\007\022" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0130\001\001\000\004\072\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\030" +
    "\020\031\021\007\022\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\376\021\007\022\016\001\001" +
    "\000\004\074\065\001\001\000\002\001\001\000\004\077" +
    "\033\001\001\000\004\055\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\052\030\042\001\001\000" +
    "\002\001\001\000\012\007\041\020\031\021\007\022\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\060" +
    "\030\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\056\030\042\001\001\000" +
    "\004\030\055\001\001\000\002\001\001\000\004\030\055" +
    "\001\001\000\002\001\001\000\004\100\063\001\001\000" +
    "\004\055\064\001\001\000\002\001\001\000\030\005\074" +
    "\006\101\011\100\012\103\013\072\014\104\015\113\045" +
    "\073\053\070\054\076\061\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\155\006\101\011\100\012" +
    "\103\013\072\014\104\015\113\034\370\045\073\053\070" +
    "\054\076\061\102\001\001\000\002\001\001\000\032\005" +
    "\155\006\101\011\100\012\103\013\072\014\104\015\113" +
    "\034\316\045\073\053\070\054\076\061\102\001\001\000" +
    "\032\005\155\006\101\011\100\012\103\013\072\014\104" +
    "\015\113\034\315\045\073\053\070\054\076\061\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\155\006\101\011\100\012" +
    "\103\013\072\014\104\015\113\034\261\045\073\053\070" +
    "\054\076\061\102\001\001\000\032\005\155\006\101\011" +
    "\100\012\103\013\072\014\104\015\113\034\257\045\073" +
    "\053\070\054\076\061\102\001\001\000\032\005\155\006" +
    "\101\011\100\012\103\013\072\014\104\015\113\034\256" +
    "\045\073\053\070\054\076\061\102\001\001\000\032\005" +
    "\155\006\101\011\100\012\103\013\072\014\104\015\113" +
    "\034\255\045\073\053\070\054\076\061\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\236\006\101" +
    "\011\100\012\103\013\072\014\104\015\113\045\073\053" +
    "\070\054\076\061\102\001\001\000\004\070\231\001\001" +
    "\000\032\005\155\006\101\011\100\012\103\013\072\014" +
    "\104\015\113\034\225\045\073\053\070\054\076\061\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\155\006\101\011\100\012\103\013\072\014\104\015\113" +
    "\034\154\045\073\053\070\054\076\061\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\120\041\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\122\001\001\000\004\035\123\001\001\000\002\001\001" +
    "\000\004\036\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\134\024\133\030\042" +
    "\001\001\000\004\031\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\055\001\001\000\002\001\001" +
    "\000\030\005\137\006\101\011\100\012\103\013\072\014" +
    "\104\015\113\045\073\053\070\054\076\061\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\143\006\101\011\100\012\103\013\072\014\104" +
    "\015\113\045\073\053\070\054\076\061\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\153\030\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\157\006\101\011\100\012\103\013\072\014\104\015\113" +
    "\045\073\053\070\054\076\061\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\134" +
    "\024\164\030\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\175\001\001\000\004" +
    "\062\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\205\006\101" +
    "\011\100\012\103\013\072\014\104\015\113\045\073\053" +
    "\070\054\076\061\102\063\211\001\001\000\032\005\205" +
    "\006\101\011\100\012\103\013\072\014\104\015\113\045" +
    "\073\053\070\054\076\061\102\063\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\207\006\101\011" +
    "\100\012\103\013\072\014\104\015\113\045\073\053\070" +
    "\054\076\061\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\214" +
    "\006\101\011\100\012\103\013\072\014\104\015\113\045" +
    "\073\053\070\054\076\061\102\065\216\001\001\000\002" +
    "\001\001\000\030\005\217\006\101\011\100\012\103\013" +
    "\072\014\104\015\113\045\073\053\070\054\076\061\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\214\006\101\011\100\012\103\013\072" +
    "\014\104\015\113\045\073\053\070\054\076\061\102\065" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\155\006\101\011\100" +
    "\012\103\013\072\014\104\015\113\034\232\045\073\053" +
    "\070\054\076\061\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\155\006\101\011\100\012\103\013" +
    "\072\014\104\015\113\034\235\045\073\053\070\054\076" +
    "\061\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\134\024\241\030\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\245\006" +
    "\101\011\100\012\103\013\072\014\104\015\113\045\073" +
    "\053\070\054\076\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\251\006\101\011\100\012\103\013\072\014\104\015" +
    "\113\045\073\053\070\054\076\061\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\155\006\101\011" +
    "\100\012\103\013\072\014\104\015\113\034\254\045\073" +
    "\053\070\054\076\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\155\006\101\011" +
    "\100\012\103\013\072\014\104\015\113\034\225\045\073" +
    "\053\070\054\076\061\102\001\001\000\030\005\264\006" +
    "\101\011\100\012\103\013\072\014\104\015\113\045\073" +
    "\053\070\054\076\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\267\006\101\011\100\012\103" +
    "\013\072\014\104\015\113\045\073\053\070\054\076\061" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\120\041\307\001\001\000\004\075\274\001\001\000" +
    "\002\001\001\000\010\023\277\030\042\056\275\001\001" +
    "\000\002\001\001\000\010\023\301\030\042\060\300\001" +
    "\001\000\004\030\055\001\001\000\002\001\001\000\004" +
    "\030\055\001\001\000\010\023\301\030\042\060\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\155\006\101\011\100\012\103" +
    "\013\072\014\104\015\113\034\313\045\073\053\070\054" +
    "\076\061\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\321\021" +
    "\007\022\016\026\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\134\024\331\030\042\001\001\000\002\001\001\000\030" +
    "\005\327\006\101\011\100\012\103\013\072\014\104\015" +
    "\113\045\073\053\070\054\076\061\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\344" +
    "\030\042\001\001\000\004\030\055\001\001\000\010\023" +
    "\134\024\346\030\042\001\001\000\002\001\001\000\004" +
    "\027\350\001\001\000\002\001\001\000\004\101\352\001" +
    "\001\000\002\001\001\000\006\023\354\030\042\001\001" +
    "\000\004\030\055\001\001\000\010\023\134\024\356\030" +
    "\042\001\001\000\002\001\001\000\004\027\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\366\006" +
    "\101\011\100\012\103\013\072\014\104\015\113\045\073" +
    "\053\070\054\076\061\102\001\001\000\030\005\364\006" +
    "\101\011\100\012\103\013\072\014\104\015\113\045\073" +
    "\053\070\054\076\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u0102\076\u0103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\u0104" +
    "\067\u0107\001\001\000\002\001\001\000\006\023\u010d\030" +
    "\042\001\001\000\006\023\u010b\030\042\001\001\000\002" +
    "\001\001\000\012\007\u0109\020\031\021\007\022\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\055" +
    "\001\001\000\002\001\001\000\004\030\055\001\001\000" +
    "\002\001\001\000\010\023\277\030\042\056\u0110\001\001" +
    "\000\002\001\001\000\010\023\277\030\042\056\u0112\001" +
    "\001\000\002\001\001\000\004\010\u0114\001\001\000\002" +
    "\001\001\000\004\044\u0117\001\001\000\014\016\u0122\020" +
    "\u0124\021\007\022\016\040\u0123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\u011c\020\031\021\007\022\016\001\001\000\030" +
    "\005\u011d\006\101\011\100\012\103\013\072\014\104\015" +
    "\113\045\073\053\070\054\076\061\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\u0120\001\001\000" +
    "\004\044\u0121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0126\001" +
    "\001\000\004\017\u0127\001\001\000\002\001\001\000\012" +
    "\016\u0129\020\u0124\021\007\022\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u012d\020\031\021\007" +
    "\022\016\001\001\000\002\001\001\000\030\005\u012e\006" +
    "\101\011\100\012\103\013\072\014\104\015\113\045\073" +
    "\053\070\054\076\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\u0104\067\u013c" +
    "\001\001\000\004\071\u0139\001\001\000\006\033\u0104\067" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    
    public TablaSimbolos tabla = TablaSimbolos.getInstance();
    public PilaSemantica pila = PilaSemantica.getInstance();

    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void guardarRSTipo(String tipo){
        RSTipo rsTipo = new RSTipo(tipo);
        this.pila.Push(rsTipo);
    }

    public void guardarRSVar(String ID, int linea, int columna){
        RSVar var = new RSVar(ID, linea, columna);
        this.pila.Push(var);
    }

    public void guardarAmbito(String ambito){
        this.pila.guardarVariable(ambito);
    }

    public void verificarAsignacion(String ID, int linea, int columna){
        this.pila.verificarAsignacion(ID, linea, columna);
    }

    public void verificarFuncion(String ID, int linea, int columna){
        this.pila.verificarFuncion(ID, linea, columna);
    }

    public void guardarOperador(String operador){
        RSOperador operadorRS = new RSOperador(operador);
        this.pila.Push(operadorRS);
    }

    public void guardarConstante(String numero, int linea, int columna){
        this.pila.constantFolding(numero, linea, columna);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Sintax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SW",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LONG_AUX ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPO ::= Void 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("void"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPO ::= Char 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("char"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMS_LL ::= Identificador NT$10 PARAMS_LL_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$10 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMS ::= TIPO Identificador NT$9 PARAMS_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$9 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarOperador(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERADOR ::= Menos 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarOperador(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERADOR ::= Mas 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarOperador(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= Literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarConstante(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_FOR ::= error Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_FOR ::= TIPO Identificador NT$8 Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$8 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local FOR"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY_AUX_CONST ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAY_AUX_CONST ::= Corchete_a Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAY_AUX_CONST ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAY_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAY_AUX ::= Coma Identificador NT$7 ARRAY_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$7 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAY_AUX ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAY_AUX ::= Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAY_AUX ::= Corchete_a EXP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VAR_AUX_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VAR_AUX_LIST ::= Coma Identificador DECLARACION_VAR_AUX_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VAR_AUX_LIST ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_VAR ::= TIPO Identificador NT$6 ARRAY_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_VAR ::= Const TIPO Identificador NT$5 ARRAY_AUX_CONST Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETURN_AUX_OPTIONS ::= Identificador Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETURN_AUX_OPTIONS ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_AUX",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION_VAR ::= Identificador Asignacion NT$4 ARRAY_AUX_AUX Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 parser.verificarAsignacion(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= Return RETURN_AUX_OPTIONS DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= Return Numero Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 parser.verificarFuncion(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR NT$3 SENTENCIA Llave_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES_INICIALES_AUX ::= error Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES_INICIALES_AUX ::= Coma Identificador NT$2 DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador NT$1 DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO Identificador NT$0 ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

