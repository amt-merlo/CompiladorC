
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 21:25:45 CST 2022
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Scanner.Registros.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 21:25:45 CST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\071\002\000\002\043" +
    "\011\000\002\072\002\000\002\043\007\000\002\043\010" +
    "\000\002\043\006\000\002\043\002\000\002\044\003\000" +
    "\002\073\002\000\002\044\006\000\002\044\011\000\002" +
    "\044\006\000\002\044\007\000\002\044\002\000\002\002" +
    "\004\000\002\003\012\000\002\003\010\000\002\003\002" +
    "\000\002\074\002\000\002\006\010\000\002\006\003\000" +
    "\002\075\002\000\002\005\006\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\006\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\005\002\000\002\076\002\000\002\045\007\000\002\045" +
    "\006\000\002\034\003\000\002\032\003\000\002\032\002" +
    "\000\002\070\003\000\002\070\004\000\002\077\002\000" +
    "\002\007\011\000\002\100\002\000\002\007\010\000\002" +
    "\007\006\000\002\007\002\000\002\010\003\000\002\010" +
    "\005\000\002\010\002\000\002\055\005\000\002\055\004" +
    "\000\002\055\003\000\002\101\002\000\002\055\006\000" +
    "\002\055\002\000\002\067\007\000\002\067\006\000\002" +
    "\067\003\000\002\033\004\000\002\033\004\000\002\056" +
    "\003\000\002\056\005\000\002\060\003\000\002\060\005" +
    "\000\002\102\002\000\002\011\012\000\002\011\011\000" +
    "\002\011\007\000\002\024\003\000\002\024\005\000\002" +
    "\024\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\012\007\000\002\012\007" +
    "\000\002\103\002\000\002\013\012\000\002\013\011\000" +
    "\002\014\012\000\002\014\012\000\002\053\004\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\104" +
    "\002\000\002\026\013\000\002\026\011\000\002\026\007" +
    "\000\002\027\005\000\002\027\004\000\002\027\004\000" +
    "\002\027\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\040\003\000\002\040\002\000" +
    "\002\105\002\000\002\016\006\000\002\017\004\000\002" +
    "\017\002\000\002\041\003\000\002\041\002\000\002\106" +
    "\002\000\002\036\005\000\002\035\004\000\002\035\002" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\022\004\000\002" +
    "\047\003\000\002\047\004\000\002\050\003\000\002\050" +
    "\002\000\002\021\004\000\002\051\003\000\002\051\004" +
    "\000\002\052\003\000\002\052\002\000\002\054\007\000" +
    "\002\054\007\000\002\061\012\000\002\062\005\000\002" +
    "\062\005\000\002\062\002\000\002\063\005\000\002\063" +
    "\003\000\002\064\007\000\002\064\006\000\002\064\002" +
    "\000\002\065\005\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\020\002\ufffa\005\ufffa\010\ufffa\011\ufffa\017" +
    "\ufffa\021\ufffa\023\ufffa\001\002\000\004\002\u0149\001\002" +
    "\000\020\002\uffef\005\013\010\012\011\007\017\014\021" +
    "\006\023\016\001\002\000\006\005\u0146\021\u0145\001\002" +
    "\000\014\005\013\010\012\017\014\021\006\023\016\001" +
    "\002\000\010\003\uff82\030\uff82\040\uff82\001\002\000\004" +
    "\002\ufff2\001\002\000\010\003\uff85\030\uff85\040\uff85\001" +
    "\002\000\010\003\uff86\030\uff86\040\uff86\001\002\000\006" +
    "\005\u0139\017\u0138\001\002\000\010\003\020\030\021\040" +
    "\022\001\002\000\010\003\uff84\030\uff84\040\uff84\001\002" +
    "\000\010\003\uff83\030\uff83\040\uff83\001\002\000\030\002" +
    "\ufff3\003\u0120\005\ufff3\010\ufff3\011\ufff3\012\u011f\017\ufff3" +
    "\021\ufff3\023\ufff3\032\u011c\041\u011e\001\002\000\030\002" +
    "\ufffe\003\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe\017\ufffe" +
    "\021\ufffe\023\ufffe\032\ufffe\041\ufffe\001\002\000\004\032" +
    "\023\001\002\000\004\033\024\001\002\000\006\003\026" +
    "\036\025\001\002\000\052\003\uffcd\004\uffcd\005\013\006" +
    "\uffcd\010\012\011\030\013\uffcd\015\uffcd\016\uffcd\017\014" +
    "\020\uffcd\021\006\022\uffcd\023\016\024\uffcd\025\uffcd\030" +
    "\uffcd\037\uffcd\053\uffcd\054\uffcd\001\002\000\004\037\027" +
    "\001\002\000\004\002\ufff0\001\002\000\014\005\013\010" +
    "\012\017\014\021\006\023\016\001\002\000\036\003\110" +
    "\004\106\006\075\013\066\015\112\016\071\020\107\022" +
    "\111\024\113\025\105\030\077\037\uffdb\053\067\054\115" +
    "\001\002\000\004\030\033\001\002\000\012\003\034\012" +
    "\035\034\036\041\uffc4\001\002\000\004\041\uffc7\001\002" +
    "\000\004\030\063\001\002\000\022\030\050\031\044\032" +
    "\047\035\046\042\052\047\054\050\045\051\051\001\002" +
    "\000\004\041\uffd0\001\002\000\004\041\041\001\002\000" +
    "\052\003\uffcd\004\uffcd\005\013\006\uffcd\010\012\011\030" +
    "\013\uffcd\015\uffcd\016\uffcd\017\014\020\uffcd\021\006\022" +
    "\uffcd\023\016\024\uffcd\025\uffcd\030\uffcd\037\uffcd\053\uffcd" +
    "\054\uffcd\001\002\000\036\003\uffcf\004\uffcf\006\uffcf\013" +
    "\uffcf\015\uffcf\016\uffcf\020\uffcf\022\uffcf\024\uffcf\025\uffcf" +
    "\030\uffcf\037\uffcf\053\uffcf\054\uffcf\001\002\000\022\012" +
    "\uff97\033\uff97\035\uff97\037\uff97\041\uff97\047\uff97\050\uff97" +
    "\051\uff97\001\002\000\022\012\uff99\033\uff99\035\uff99\037" +
    "\uff99\041\uff99\047\uff99\050\uff99\051\uff99\001\002\000\032" +
    "\012\uff94\030\uff94\031\uff94\032\uff94\033\uff94\035\uff94\037" +
    "\uff94\041\uff94\042\uff94\047\uff94\050\uff94\051\uff94\001\002" +
    "\000\004\041\uffc8\001\002\000\020\030\050\031\044\032" +
    "\047\042\052\047\054\050\045\051\051\001\002\000\024" +
    "\012\uff9a\033\uff9a\035\uff9a\037\uff9a\041\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\060\001\002\000\032\012\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\035\uff93\037\uff93\041\uff93\042" +
    "\uff93\047\uff93\050\uff93\051\uff93\001\002\000\022\012\uff98" +
    "\033\uff98\035\uff98\037\uff98\041\uff98\047\uff98\050\uff98\051" +
    "\uff98\001\002\000\012\035\055\047\054\050\045\051\051" +
    "\001\002\000\032\012\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\035\uff95\037\uff95\041\uff95\042\uff95\047\uff95\050\uff95" +
    "\051\uff95\001\002\000\004\041\uffc9\001\002\000\020\030" +
    "\050\031\044\032\047\042\052\047\054\050\045\051\051" +
    "\001\002\000\022\012\uff9c\033\uff9c\035\uff9c\037\uff9c\041" +
    "\uff9c\047\054\050\045\051\051\001\002\000\022\012\uff96" +
    "\033\uff96\035\uff96\037\uff96\041\uff96\047\uff96\050\uff96\051" +
    "\uff96\001\002\000\012\033\062\047\054\050\045\051\051" +
    "\001\002\000\022\012\uff9b\033\uff9b\035\uff9b\037\uff9b\041" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\001\002\000\012\003\uffc6" +
    "\012\uffc6\034\uffc6\041\uffc6\001\002\000\012\003\034\012" +
    "\035\034\036\041\uffc4\001\002\000\004\041\uffc5\001\002" +
    "\000\004\041\u0103\001\002\000\004\032\377\001\002\000" +
    "\042\003\110\004\106\006\075\007\uffdb\013\066\014\uffdb" +
    "\015\112\016\071\020\107\022\111\024\113\025\105\030" +
    "\077\037\uffdb\053\067\054\115\001\002\000\004\032\325" +
    "\001\002\000\042\003\110\004\106\006\075\007\uffdb\013" +
    "\066\014\uffdb\015\112\016\071\020\107\022\111\024\113" +
    "\025\105\030\077\037\uffdb\053\067\054\115\001\002\000" +
    "\042\003\110\004\106\006\075\007\uffdb\013\066\014\uffdb" +
    "\015\112\016\071\020\107\022\111\024\113\025\105\030" +
    "\077\037\uffdb\053\067\054\115\001\002\000\004\037\322" +
    "\001\002\000\004\041\320\001\002\000\042\003\uffec\004" +
    "\uffec\006\uffec\007\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\020\uffec\022\uffec\024\uffec\025\uffec\030\uffec\037\uffec\053" +
    "\uffec\054\uffec\001\002\000\010\032\273\043\275\052\274" +
    "\001\002\000\044\003\264\004\106\006\075\007\uffdb\013" +
    "\066\014\uffdb\015\112\016\071\020\107\022\111\024\113" +
    "\025\105\026\262\030\077\037\uffdb\053\067\054\115\001" +
    "\002\000\042\003\110\004\106\006\075\007\uffdb\013\066" +
    "\014\uffdb\015\112\016\071\020\107\022\111\024\113\025" +
    "\105\030\077\037\uffdb\053\067\054\115\001\002\000\042" +
    "\003\110\004\106\006\075\007\uffdb\013\066\014\uffdb\015" +
    "\112\016\071\020\107\022\111\024\113\025\105\030\077" +
    "\037\uffdb\053\067\054\115\001\002\000\042\003\110\004" +
    "\106\006\075\007\uffdb\013\066\014\uffdb\015\112\016\071" +
    "\020\107\022\111\024\113\025\105\030\077\037\uffdb\053" +
    "\067\054\115\001\002\000\004\041\255\001\002\000\004" +
    "\032\240\001\002\000\042\003\110\004\106\006\075\007" +
    "\uffdb\013\066\014\uffdb\015\112\016\071\020\107\022\111" +
    "\024\113\025\105\030\077\037\uffdb\053\067\054\115\001" +
    "\002\000\010\030\231\041\230\042\227\001\002\000\042" +
    "\003\110\004\106\006\075\007\uffdb\013\066\014\uffdb\015" +
    "\112\016\071\020\107\022\111\024\113\025\105\030\077" +
    "\037\uffdb\053\067\054\115\001\002\000\004\032\170\001" +
    "\002\000\004\036\157\001\002\000\004\032\132\001\002" +
    "\000\042\003\110\004\106\006\075\007\uffdb\013\066\014" +
    "\uffdb\015\112\016\071\020\107\022\111\024\113\025\105" +
    "\030\077\037\uffdb\053\067\054\115\001\002\000\004\032" +
    "\116\001\002\000\006\030\121\033\uff8b\001\002\000\004" +
    "\033\126\001\002\000\004\033\uff8c\001\002\000\006\012" +
    "\uff8a\033\uff8a\001\002\000\006\012\124\033\uff87\001\002" +
    "\000\004\033\uff89\001\002\000\004\030\121\001\002\000" +
    "\004\033\uff88\001\002\000\004\041\127\001\002\000\042" +
    "\003\uff77\004\uff77\006\uff77\007\uff77\013\uff77\014\uff77\015" +
    "\uff77\016\uff77\020\uff77\022\uff77\024\uff77\025\uff77\030\uff77" +
    "\037\uff77\053\uff77\054\uff77\001\002\000\010\007\uffe5\014" +
    "\uffe5\037\uffe5\001\002\000\010\007\uffd7\014\uffd7\037\uffd7" +
    "\001\002\000\022\003\134\030\uffad\031\uffad\032\uffad\042" +
    "\uffad\047\uffad\050\uffad\051\uffad\001\002\000\020\030\141" +
    "\031\044\032\047\042\052\047\054\050\045\051\051\001" +
    "\002\000\004\033\135\001\002\000\004\036\136\001\002" +
    "\000\036\003\110\004\106\006\075\013\066\015\112\016" +
    "\071\020\107\022\111\024\113\025\105\030\077\037\uffdb" +
    "\053\067\054\115\001\002\000\004\037\140\001\002\000" +
    "\042\003\uffab\004\uffab\006\uffab\007\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\020\uffab\022\uffab\024\uffab\025\uffab\030" +
    "\uffab\037\uffab\053\uffab\054\uffab\001\002\000\026\027\150" +
    "\033\uff9a\041\uff9a\044\154\045\152\046\151\047\uff9a\050" +
    "\uff9a\051\uff9a\052\060\001\002\000\004\033\144\001\002" +
    "\000\014\033\uffb6\041\uffb6\047\054\050\045\051\051\001" +
    "\002\000\004\036\145\001\002\000\036\003\110\004\106" +
    "\006\075\013\066\015\112\016\071\020\107\022\111\024" +
    "\113\025\105\030\077\037\uffdb\053\067\054\115\001\002" +
    "\000\004\037\147\001\002\000\042\003\uffac\004\uffac\006" +
    "\uffac\007\uffac\013\uffac\014\uffac\015\uffac\016\uffac\020\uffac" +
    "\022\uffac\024\uffac\025\uffac\030\uffac\037\uffac\053\uffac\054" +
    "\uffac\001\002\000\022\003\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\042\uffb3\047\uffb3\050\uffb3\051\uffb3\001\002\000\022\003" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\042\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\001\002\000\022\003\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\042\uffb2\047\uffb2\050\uffb2\051\uffb2\001\002\000\022" +
    "\003\155\030\050\031\044\032\047\042\052\047\054\050" +
    "\045\051\051\001\002\000\022\003\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\042\uffb1\047\uffb1\050\uffb1\051\uffb1\001\002\000" +
    "\006\033\uffb4\041\uffb4\001\002\000\014\033\uffb5\041\uffb5" +
    "\047\054\050\045\051\051\001\002\000\036\003\110\004" +
    "\106\006\075\013\066\015\112\016\071\020\107\022\111" +
    "\024\113\025\105\030\077\037\uffdb\053\067\054\115\001" +
    "\002\000\004\037\161\001\002\000\004\024\162\001\002" +
    "\000\004\032\163\001\002\000\022\003\164\030\141\031" +
    "\044\032\047\042\052\047\054\050\045\051\051\001\002" +
    "\000\004\033\167\001\002\000\004\033\166\001\002\000" +
    "\004\041\uffaa\001\002\000\004\041\uffa9\001\002\000\006" +
    "\030\172\031\171\001\002\000\004\033\uff6a\001\002\000" +
    "\006\033\uff69\043\224\001\002\000\004\033\174\001\002" +
    "\000\004\036\175\001\002\000\010\007\uff6d\014\uff6d\037" +
    "\uff6d\001\002\000\010\007\177\014\200\037\uff72\001\002" +
    "\000\006\003\214\031\213\001\002\000\006\003\203\055" +
    "\204\001\002\000\004\037\202\001\002\000\042\003\uff75" +
    "\004\uff75\006\uff75\007\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\020\uff75\022\uff75\024\uff75\025\uff75\030\uff75\037\uff75" +
    "\053\uff75\054\uff75\001\002\000\040\003\110\004\106\006" +
    "\075\013\066\015\112\016\071\020\107\022\111\024\113" +
    "\025\105\030\077\036\207\037\uffdb\053\067\054\115\001" +
    "\002\000\040\003\110\004\106\006\075\013\066\015\112" +
    "\016\071\020\107\022\111\024\113\025\105\030\077\036" +
    "\207\037\uffdb\053\067\054\115\001\002\000\004\037\uff74" +
    "\001\002\000\004\037\uff70\001\002\000\036\003\110\004" +
    "\106\006\075\013\066\015\112\016\071\020\107\022\111" +
    "\024\113\025\105\030\077\037\uffdb\053\067\054\115\001" +
    "\002\000\004\037\211\001\002\000\004\037\uff71\001\002" +
    "\000\004\037\uff73\001\002\000\004\055\222\001\002\000" +
    "\044\003\110\004\106\006\075\007\uffdb\013\066\014\uffdb" +
    "\015\112\016\071\020\107\022\111\024\113\025\105\030" +
    "\077\036\216\037\uffdb\053\067\054\115\001\002\000\010" +
    "\007\uff6b\014\uff6b\037\uff6b\001\002\000\036\003\110\004" +
    "\106\006\075\013\066\015\112\016\071\020\107\022\111" +
    "\024\113\025\105\030\077\037\uffdb\053\067\054\115\001" +
    "\002\000\010\007\uff6e\014\uff6e\037\uff6e\001\002\000\004" +
    "\037\221\001\002\000\010\007\uff6c\014\uff6c\037\uff6c\001" +
    "\002\000\044\003\110\004\106\006\075\007\uffdb\013\066" +
    "\014\uffdb\015\112\016\071\020\107\022\111\024\113\025" +
    "\105\030\077\036\216\037\uffdb\053\067\054\115\001\002" +
    "\000\010\007\uff6f\014\uff6f\037\uff6f\001\002\000\004\031" +
    "\225\001\002\000\004\033\uff68\001\002\000\010\007\uffdc" +
    "\014\uffdc\037\uffdc\001\002\000\004\041\235\001\002\000" +
    "\042\003\uffd4\004\uffd4\006\uffd4\007\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4\030" +
    "\uffd4\037\uffd4\053\uffd4\054\uffd4\001\002\000\004\041\234" +
    "\001\002\000\042\003\110\004\106\006\075\007\uffdb\013" +
    "\066\014\uffdb\015\112\016\071\020\107\022\111\024\113" +
    "\025\105\030\077\037\uffdb\053\067\054\115\001\002\000" +
    "\010\007\uffdf\014\uffdf\037\uffdf\001\002\000\042\003\uffd3" +
    "\004\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\022\uffd3\024\uffd3\025\uffd3\030\uffd3\037\uffd3" +
    "\053\uffd3\054\uffd3\001\002\000\042\003\110\004\106\006" +
    "\075\007\uffdb\013\066\014\uffdb\015\112\016\071\020\107" +
    "\022\111\024\113\025\105\030\077\037\uffdb\053\067\054" +
    "\115\001\002\000\010\007\uffe0\014\uffe0\037\uffe0\001\002" +
    "\000\010\007\uffdd\014\uffdd\037\uffdd\001\002\000\022\003" +
    "\241\030\141\031\044\032\047\042\052\047\054\050\045" +
    "\051\051\001\002\000\004\033\251\001\002\000\004\033" +
    "\243\001\002\000\006\003\245\036\244\001\002\000\036" +
    "\003\uffba\004\uffba\006\uffba\013\uffba\015\uffba\016\uffba\020" +
    "\uffba\022\uffba\024\uffba\025\uffba\030\uffba\037\uffba\053\uffba" +
    "\054\uffba\001\002\000\044\003\uffb7\004\uffb7\006\uffb7\007" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\030\uffb7\037\uffb7\053\uffb7\054" +
    "\uffb7\001\002\000\036\003\110\004\106\006\075\013\066" +
    "\015\112\016\071\020\107\022\111\024\113\025\105\030" +
    "\077\037\uffdb\053\067\054\115\001\002\000\004\037\250" +
    "\001\002\000\044\003\uffb9\004\uffb9\006\uffb9\007\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9\022\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\037\uffb9\053\uffb9\054\uffb9\001" +
    "\002\000\004\036\252\001\002\000\036\003\110\004\106" +
    "\006\075\013\066\015\112\016\071\020\107\022\111\024" +
    "\113\025\105\030\077\037\uffdb\053\067\054\115\001\002" +
    "\000\004\037\254\001\002\000\044\003\uffb8\004\uffb8\006" +
    "\uffb8\007\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\022\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\037\uffb8\053" +
    "\uffb8\054\uffb8\001\002\000\042\003\110\004\106\006\075" +
    "\007\uffdb\013\066\014\uffdb\015\112\016\071\020\107\022" +
    "\111\024\113\025\105\030\077\037\uffdb\053\067\054\115" +
    "\001\002\000\010\007\uffe6\014\uffe6\037\uffe6\001\002\000" +
    "\010\007\uffe4\014\uffe4\037\uffe4\001\002\000\010\007\uffe8" +
    "\014\uffe8\037\uffe8\001\002\000\010\007\uffe3\014\uffe3\037" +
    "\uffe3\001\002\000\004\036\270\001\002\000\010\007\uffe9" +
    "\014\uffe9\037\uffe9\001\002\000\044\003\110\004\106\006" +
    "\075\007\uffdb\013\066\014\uffdb\015\112\016\071\020\107" +
    "\022\111\024\113\025\105\030\077\036\265\037\uffdb\053" +
    "\067\054\115\001\002\000\036\003\110\004\106\006\075" +
    "\013\066\015\112\016\071\020\107\022\111\024\113\025" +
    "\105\030\077\037\uffdb\053\067\054\115\001\002\000\004" +
    "\037\267\001\002\000\042\003\uffae\004\uffae\006\uffae\007" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\020\uffae\022\uffae" +
    "\024\uffae\025\uffae\030\uffae\037\uffae\053\uffae\054\uffae\001" +
    "\002\000\036\003\110\004\106\006\075\013\066\015\112" +
    "\016\071\020\107\022\111\024\113\025\105\030\077\037" +
    "\uffdb\053\067\054\115\001\002\000\004\037\272\001\002" +
    "\000\042\003\uffaf\004\uffaf\006\uffaf\007\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf" +
    "\030\uffaf\037\uffaf\053\uffaf\054\uffaf\001\002\000\006\030" +
    "\121\033\uff8b\001\002\000\004\041\uffeb\001\002\000\024" +
    "\003\276\030\uffda\031\uffda\032\uffda\036\uffda\042\uffda\047" +
    "\uffda\050\uffda\051\uffda\001\002\000\004\041\311\001\002" +
    "\000\022\030\050\031\044\032\047\036\301\042\052\047" +
    "\054\050\045\051\051\001\002\000\004\041\310\001\002" +
    "\000\020\030\050\031\044\032\047\042\052\047\054\050" +
    "\045\051\051\001\002\000\012\041\uffbe\047\054\050\045" +
    "\051\051\001\002\000\004\037\307\001\002\000\014\012" +
    "\305\037\uffbc\047\054\050\045\051\051\001\002\000\020" +
    "\030\050\031\044\032\047\042\052\047\054\050\045\051" +
    "\051\001\002\000\004\037\uffbb\001\002\000\004\041\uffbd" +
    "\001\002\000\042\003\uffd9\004\uffd9\006\uffd9\007\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\030\uffd9\037\uffd9\053\uffd9\054\uffd9\001\002\000" +
    "\042\003\uffd8\004\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\030" +
    "\uffd8\037\uffd8\053\uffd8\054\uffd8\001\002\000\004\041\313" +
    "\001\002\000\010\007\uffea\014\uffea\037\uffea\001\002\000" +
    "\004\033\uffee\001\002\000\004\033\316\001\002\000\004" +
    "\041\317\001\002\000\042\003\uffed\004\uffed\006\uffed\007" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\022\uffed" +
    "\024\uffed\025\uffed\030\uffed\037\uffed\053\uffed\054\uffed\001" +
    "\002\000\042\003\110\004\106\006\075\007\uffdb\013\066" +
    "\014\uffdb\015\112\016\071\020\107\022\111\024\113\025" +
    "\105\030\077\037\uffdb\053\067\054\115\001\002\000\010" +
    "\007\uffde\014\uffde\037\uffde\001\002\000\004\002\ufff1\001" +
    "\002\000\010\007\uffe2\014\uffe2\037\uffe2\001\002\000\010" +
    "\007\uffe7\014\uffe7\037\uffe7\001\002\000\020\003\331\005" +
    "\013\010\012\017\014\021\006\023\016\030\327\001\002" +
    "\000\004\033\367\001\002\000\004\043\361\001\002\000" +
    "\004\030\351\001\002\000\006\033\333\041\332\001\002" +
    "\000\020\030\141\031\044\032\047\042\052\047\054\050" +
    "\045\051\051\001\002\000\004\036\334\001\002\000\036" +
    "\003\110\004\106\006\075\013\066\015\112\016\071\020" +
    "\107\022\111\024\113\025\105\030\077\037\uffdb\053\067" +
    "\054\115\001\002\000\004\037\336\001\002\000\042\003" +
    "\uffa6\004\uffa6\006\uffa6\007\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\030\uffa6\037" +
    "\uffa6\053\uffa6\054\uffa6\001\002\000\004\041\340\001\002" +
    "\000\010\003\343\030\344\052\341\001\002\000\004\030" +
    "\350\001\002\000\004\033\uffa1\001\002\000\004\033\uff9d" +
    "\001\002\000\006\043\346\052\345\001\002\000\004\033" +
    "\uff9f\001\002\000\004\042\347\001\002\000\004\033\uffa0" +
    "\001\002\000\004\033\uff9e\001\002\000\004\043\uffa4\001" +
    "\002\000\004\043\353\001\002\000\020\030\050\031\044" +
    "\032\047\042\052\047\054\050\045\051\051\001\002\000" +
    "\012\041\355\047\054\050\045\051\051\001\002\000\020" +
    "\030\141\031\044\032\047\042\052\047\054\050\045\051" +
    "\051\001\002\000\004\041\357\001\002\000\010\003\343" +
    "\030\344\052\341\001\002\000\004\033\uffa3\001\002\000" +
    "\020\030\050\031\044\032\047\042\052\047\054\050\045" +
    "\051\051\001\002\000\012\041\363\047\054\050\045\051" +
    "\051\001\002\000\020\030\141\031\044\032\047\042\052" +
    "\047\054\050\045\051\051\001\002\000\004\041\365\001" +
    "\002\000\010\003\343\030\344\052\341\001\002\000\004" +
    "\033\uffa2\001\002\000\006\003\371\036\370\001\002\000" +
    "\036\003\110\004\106\006\075\013\066\015\112\016\071" +
    "\020\107\022\111\024\113\025\105\030\077\037\uffdb\053" +
    "\067\054\115\001\002\000\036\003\110\004\106\006\075" +
    "\013\066\015\112\016\071\020\107\022\111\024\113\025" +
    "\105\030\077\037\uffdb\053\067\054\115\001\002\000\004" +
    "\037\373\001\002\000\042\003\uffa5\004\uffa5\006\uffa5\007" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\020\uffa5\022\uffa5" +
    "\024\uffa5\025\uffa5\030\uffa5\037\uffa5\053\uffa5\054\uffa5\001" +
    "\002\000\004\037\375\001\002\000\042\003\uffa7\004\uffa7" +
    "\006\uffa7\007\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\020" +
    "\uffa7\022\uffa7\024\uffa7\025\uffa7\030\uffa7\037\uffa7\053\uffa7" +
    "\054\uffa7\001\002\000\010\007\uffe1\014\uffe1\037\uffe1\001" +
    "\002\000\004\030\121\001\002\000\004\033\u0101\001\002" +
    "\000\004\041\u0102\001\002\000\042\003\uff76\004\uff76\006" +
    "\uff76\007\uff76\013\uff76\014\uff76\015\uff76\016\uff76\020\uff76" +
    "\022\uff76\024\uff76\025\uff76\030\uff76\037\uff76\053\uff76\054" +
    "\uff76\001\002\000\042\003\uffa8\004\uffa8\006\uffa8\007\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\020\uffa8\022\uffa8\024" +
    "\uffa8\025\uffa8\030\uffa8\037\uffa8\053\uffa8\054\uffa8\001\002" +
    "\000\004\030\u0105\001\002\000\046\003\uffca\004\uffca\006" +
    "\uffca\012\u0107\013\uffca\015\uffca\016\uffca\020\uffca\022\uffca" +
    "\024\uffca\025\uffca\030\uffca\034\uffd2\037\uffca\041\u0106\043" +
    "\uffd2\053\uffca\054\uffca\001\002\000\036\003\uffcc\004\uffcc" +
    "\006\uffcc\013\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\024" +
    "\uffcc\025\uffcc\030\uffcc\037\uffcc\053\uffcc\054\uffcc\001\002" +
    "\000\004\030\u0119\001\002\000\006\034\u010b\043\u010c\001" +
    "\002\000\036\003\uffce\004\uffce\006\uffce\013\uffce\015\uffce" +
    "\016\uffce\020\uffce\022\uffce\024\uffce\025\uffce\030\uffce\037" +
    "\uffce\053\uffce\054\uffce\001\002\000\004\041\uffc1\001\002" +
    "\000\022\030\050\031\044\032\047\035\u0112\042\052\047" +
    "\054\050\045\051\051\001\002\000\022\003\u0110\030\050" +
    "\031\044\032\047\042\052\047\054\050\045\051\051\001" +
    "\002\000\004\041\u010e\001\002\000\052\003\uffcd\004\uffcd" +
    "\005\013\006\uffcd\010\012\011\030\013\uffcd\015\uffcd\016" +
    "\uffcd\017\014\020\uffcd\021\006\022\uffcd\023\016\024\uffcd" +
    "\025\uffcd\030\uffcd\037\uffcd\053\uffcd\054\uffcd\001\002\000" +
    "\036\003\uffd1\004\uffd1\006\uffd1\013\uffd1\015\uffd1\016\uffd1" +
    "\020\uffd1\022\uffd1\024\uffd1\025\uffd1\030\uffd1\037\uffd1\053" +
    "\uffd1\054\uffd1\001\002\000\004\041\uffbf\001\002\000\012" +
    "\041\uffc0\047\054\050\045\051\051\001\002\000\004\043" +
    "\u0117\001\002\000\012\035\u0114\047\054\050\045\051\051" +
    "\001\002\000\004\043\u0115\001\002\000\022\030\050\031" +
    "\044\032\047\036\301\042\052\047\054\050\045\051\051" +
    "\001\002\000\004\041\uffc3\001\002\000\022\030\050\031" +
    "\044\032\047\036\301\042\052\047\054\050\045\051\051" +
    "\001\002\000\004\041\uffc2\001\002\000\042\003\uffca\004" +
    "\uffca\006\uffca\012\u0107\013\uffca\015\uffca\016\uffca\020\uffca" +
    "\022\uffca\024\uffca\025\uffca\030\uffca\037\uffca\041\u0106\053" +
    "\uffca\054\uffca\001\002\000\036\003\uffcb\004\uffcb\006\uffcb" +
    "\013\uffcb\015\uffcb\016\uffcb\020\uffcb\022\uffcb\024\uffcb\025" +
    "\uffcb\030\uffcb\037\uffcb\053\uffcb\054\uffcb\001\002\000\030" +
    "\002\ufff3\003\u0120\005\ufff3\010\ufff3\011\ufff3\012\u011f\017" +
    "\ufff3\021\ufff3\023\ufff3\032\u011c\041\u011e\001\002\000\016" +
    "\005\013\010\012\017\014\021\006\023\016\033\uff91\001" +
    "\002\000\020\002\ufffd\005\ufffd\010\ufffd\011\ufffd\017\ufffd" +
    "\021\ufffd\023\ufffd\001\002\000\020\002\ufff9\005\ufff9\010" +
    "\ufff9\011\ufff9\017\ufff9\021\ufff9\023\ufff9\001\002\000\004" +
    "\030\u0125\001\002\000\004\036\u0121\001\002\000\052\003" +
    "\uffcd\004\uffcd\005\013\006\uffcd\010\012\011\030\013\uffcd" +
    "\015\uffcd\016\uffcd\017\014\020\uffcd\021\006\022\uffcd\023" +
    "\016\024\uffcd\025\uffcd\030\uffcd\037\uffcd\053\uffcd\054\uffcd" +
    "\001\002\000\036\003\110\004\106\006\075\013\066\015" +
    "\112\016\071\020\107\022\111\024\113\025\105\030\077" +
    "\037\uffdb\053\067\054\115\001\002\000\004\037\u0124\001" +
    "\002\000\020\002\ufff4\005\ufff4\010\ufff4\011\ufff4\017\ufff4" +
    "\021\ufff4\023\ufff4\001\002\000\030\002\ufff8\003\ufff8\005" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\017\ufff8\021\ufff8\023\ufff8" +
    "\032\ufff8\041\ufff8\001\002\000\030\002\ufff3\003\u0120\005" +
    "\ufff3\010\ufff3\011\ufff3\012\u011f\017\ufff3\021\ufff3\023\ufff3" +
    "\032\u011c\041\u011e\001\002\000\020\002\ufff7\005\ufff7\010" +
    "\ufff7\011\ufff7\017\ufff7\021\ufff7\023\ufff7\001\002\000\004" +
    "\033\uff92\001\002\000\004\033\u0130\001\002\000\004\030" +
    "\u012b\001\002\000\006\012\uff90\033\uff90\001\002\000\006" +
    "\012\u012e\033\uff8d\001\002\000\004\033\uff8f\001\002\000" +
    "\014\005\013\010\012\017\014\021\006\023\016\001\002" +
    "\000\004\033\uff8e\001\002\000\006\036\u0131\041\u0132\001" +
    "\002\000\052\003\uffcd\004\uffcd\005\013\006\uffcd\010\012" +
    "\011\030\013\uffcd\015\uffcd\016\uffcd\017\014\020\uffcd\021" +
    "\006\022\uffcd\023\016\024\uffcd\025\uffcd\030\uffcd\037\uffcd" +
    "\053\uffcd\054\uffcd\001\002\000\020\002\ufff5\005\ufff5\010" +
    "\ufff5\011\ufff5\017\ufff5\021\ufff5\023\ufff5\001\002\000\036" +
    "\003\110\004\106\006\075\013\066\015\112\016\071\020" +
    "\107\022\111\024\113\025\105\030\077\037\uffdb\053\067" +
    "\054\115\001\002\000\004\037\u0135\001\002\000\020\002" +
    "\ufff6\005\ufff6\010\ufff6\011\ufff6\017\ufff6\021\ufff6\023\ufff6" +
    "\001\002\000\020\002\ufffb\005\ufffb\010\ufffb\011\ufffb\017" +
    "\ufffb\021\ufffb\023\ufffb\001\002\000\010\003\uff7c\030\uff7c" +
    "\040\uff7c\001\002\000\012\003\uff78\005\u013b\030\uff78\040" +
    "\uff78\001\002\000\010\003\uff7b\030\uff7b\040\uff7b\001\002" +
    "\000\010\003\uff7a\030\uff7a\040\uff7a\001\002\000\010\003" +
    "\uff79\030\uff79\040\uff79\001\002\000\006\003\u013d\030\u013e" +
    "\001\002\000\006\034\u010b\043\u010c\001\002\000\006\034" +
    "\000\043\000\001\002\000\006\034\u010b\043\u010c\001\002" +
    "\000\004\041\u0141\001\002\000\020\002\uffff\005\uffff\010" +
    "\uffff\011\uffff\017\uffff\021\uffff\023\uffff\001\002\000\004" +
    "\041\u0143\001\002\000\020\002\ufffc\005\ufffc\010\ufffc\011" +
    "\ufffc\017\ufffc\021\ufffc\023\ufffc\001\002\000\010\003\uff81" +
    "\030\uff81\040\uff81\001\002\000\012\003\uff7d\005\u0148\030" +
    "\uff7d\040\uff7d\001\002\000\010\003\uff80\030\uff80\040\uff80" +
    "\001\002\000\010\003\uff7f\030\uff7f\040\uff7f\001\002\000" +
    "\010\003\uff7e\030\uff7e\040\uff7e\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\006\002\003\043\004\001\001\000\002\001" +
    "\001\000\012\003\010\020\014\021\007\022\016\001\001" +
    "\000\004\047\u0143\001\001\000\010\020\u013b\021\007\022" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\u0135\001\001\000\004\072\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\030" +
    "\020\031\021\007\022\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\u0103\021\007\022\016\001\001" +
    "\000\030\005\073\006\100\011\077\012\101\013\071\014" +
    "\103\015\113\045\072\053\067\054\075\061\102\001\001" +
    "\000\002\001\001\000\004\055\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\052\030\042\001\001" +
    "\000\004\100\037\001\001\000\002\001\001\000\012\007" +
    "\041\020\031\021\007\022\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\060\030\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\056\030\042\001\001\000\004\030\055\001\001\000" +
    "\002\001\001\000\004\030\055\001\001\000\002\001\001" +
    "\000\004\101\063\001\001\000\004\055\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\130\006\100\011\077\012\101\013\071\014\103\015" +
    "\113\034\375\045\072\053\067\054\075\061\102\001\001" +
    "\000\002\001\001\000\032\005\130\006\100\011\077\012" +
    "\101\013\071\014\103\015\113\034\323\045\072\053\067" +
    "\054\075\061\102\001\001\000\032\005\130\006\100\011" +
    "\077\012\101\013\071\014\103\015\113\034\322\045\072" +
    "\053\067\054\075\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\130\006\100\011\077\012\101\013\071\014\103\015" +
    "\113\034\262\045\072\053\067\054\075\061\102\001\001" +
    "\000\032\005\130\006\100\011\077\012\101\013\071\014" +
    "\103\015\113\034\260\045\072\053\067\054\075\061\102" +
    "\001\001\000\032\005\130\006\100\011\077\012\101\013" +
    "\071\014\103\015\113\034\257\045\072\053\067\054\075" +
    "\061\102\001\001\000\032\005\130\006\100\011\077\012" +
    "\101\013\071\014\103\015\113\034\256\045\072\053\067" +
    "\054\075\061\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\236\006\100\011\077\012\101\013\071" +
    "\014\103\015\113\045\072\053\067\054\075\061\102\001" +
    "\001\000\004\070\231\001\001\000\032\005\130\006\100" +
    "\011\077\012\101\013\071\014\103\015\113\034\225\045" +
    "\072\053\067\054\075\061\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\130\006" +
    "\100\011\077\012\101\013\071\014\103\015\113\034\127" +
    "\045\072\053\067\054\075\061\102\001\001\000\002\001" +
    "\001\000\006\036\117\041\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\121\001\001\000\004\035" +
    "\122\001\001\000\002\001\001\000\004\036\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\132\001\001" +
    "\000\010\023\142\024\141\030\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\136\006\100\011\077" +
    "\012\101\013\071\014\103\015\113\045\072\053\067\054" +
    "\075\061\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\152\001\001\000\002\001\001\000\004\030" +
    "\055\001\001\000\002\001\001\000\030\005\145\006\100" +
    "\011\077\012\101\013\071\014\103\015\113\045\072\053" +
    "\067\054\075\061\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\155\030\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\055\001\001\000\030\005" +
    "\157\006\100\011\077\012\101\013\071\014\103\015\113" +
    "\045\072\053\067\054\075\061\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\142" +
    "\024\164\030\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\175\001\001\000\004" +
    "\062\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\205\006\100" +
    "\011\077\012\101\013\071\014\103\015\113\045\072\053" +
    "\067\054\075\061\102\063\211\001\001\000\032\005\205" +
    "\006\100\011\077\012\101\013\071\014\103\015\113\045" +
    "\072\053\067\054\075\061\102\063\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\207\006\100\011" +
    "\077\012\101\013\071\014\103\015\113\045\072\053\067" +
    "\054\075\061\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\214" +
    "\006\100\011\077\012\101\013\071\014\103\015\113\045" +
    "\072\053\067\054\075\061\102\065\216\001\001\000\002" +
    "\001\001\000\030\005\217\006\100\011\077\012\101\013" +
    "\071\014\103\015\113\045\072\053\067\054\075\061\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\214\006\100\011\077\012\101\013\071" +
    "\014\103\015\113\045\072\053\067\054\075\061\102\065" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\130\006\100\011\077" +
    "\012\101\013\071\014\103\015\113\034\232\045\072\053" +
    "\067\054\075\061\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\130\006\100\011\077\012\101\013" +
    "\071\014\103\015\113\034\235\045\072\053\067\054\075" +
    "\061\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\142\024\241\030\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\245\001" +
    "\001\000\002\001\001\000\030\005\246\006\100\011\077" +
    "\012\101\013\071\014\103\015\113\045\072\053\067\054" +
    "\075\061\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\252\006\100\011\077\012" +
    "\101\013\071\014\103\015\113\045\072\053\067\054\075" +
    "\061\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\130\006\100\011\077\012\101\013\071\014\103" +
    "\015\113\034\255\045\072\053\067\054\075\061\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\130\006\100\011\077\012\101\013\071\014\103" +
    "\015\113\034\225\045\072\053\067\054\075\061\102\001" +
    "\001\000\030\005\265\006\100\011\077\012\101\013\071" +
    "\014\103\015\113\045\072\053\067\054\075\061\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\270" +
    "\006\100\011\077\012\101\013\071\014\103\015\113\045" +
    "\072\053\067\054\075\061\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\117\041\313\001\001\000" +
    "\004\075\311\001\001\000\004\076\276\001\001\000\002" +
    "\001\001\000\010\023\301\030\042\056\277\001\001\000" +
    "\002\001\001\000\010\023\303\030\042\060\302\001\001" +
    "\000\004\030\055\001\001\000\002\001\001\000\004\030" +
    "\055\001\001\000\010\023\303\030\042\060\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\130\006\100\011\077\012\101" +
    "\013\071\014\103\015\113\034\320\045\072\053\067\054" +
    "\075\061\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\327\021" +
    "\007\022\016\026\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\142\024\336\030\042\001\001\000\002\001\001\000\030" +
    "\005\334\006\100\011\077\012\101\013\071\014\103\015" +
    "\113\045\072\053\067\054\075\061\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\351" +
    "\001\001\000\002\001\001\000\006\023\353\030\042\001" +
    "\001\000\004\030\055\001\001\000\010\023\142\024\355" +
    "\030\042\001\001\000\002\001\001\000\004\027\357\001" +
    "\001\000\002\001\001\000\006\023\361\030\042\001\001" +
    "\000\004\030\055\001\001\000\010\023\142\024\363\030" +
    "\042\001\001\000\002\001\001\000\004\027\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\373\006" +
    "\100\011\077\012\101\013\071\014\103\015\113\045\072" +
    "\053\067\054\075\061\102\001\001\000\030\005\371\006" +
    "\100\011\077\012\101\013\071\014\103\015\113\045\072" +
    "\053\067\054\075\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u0108\077\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\u0109\067\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\u0112\030" +
    "\042\001\001\000\006\023\u0110\030\042\001\001\000\002" +
    "\001\001\000\012\007\u010e\020\031\021\007\022\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\055" +
    "\001\001\000\002\001\001\000\004\030\055\001\001\000" +
    "\002\001\001\000\010\023\301\030\042\056\u0115\001\001" +
    "\000\002\001\001\000\010\023\301\030\042\056\u0117\001" +
    "\001\000\002\001\001\000\004\010\u0119\001\001\000\002" +
    "\001\001\000\004\044\u011c\001\001\000\014\016\u0127\020" +
    "\u0129\021\007\022\016\040\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\u0121\020\031\021\007\022\016\001\001\000\030" +
    "\005\u0122\006\100\011\077\012\101\013\071\014\103\015" +
    "\113\045\072\053\067\054\075\061\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\u0125\001\001\000" +
    "\004\044\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\u012b\001" +
    "\001\000\004\017\u012c\001\001\000\002\001\001\000\012" +
    "\016\u012e\020\u0129\021\007\022\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u0132\020\031\021\007" +
    "\022\016\001\001\000\002\001\001\000\030\005\u0133\006" +
    "\100\011\077\012\101\013\071\014\103\015\113\045\072" +
    "\053\067\054\075\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\u0109\067\u0141" +
    "\001\001\000\004\071\u013e\001\001\000\006\033\u0109\067" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    
    public TablaSimbolos tabla = TablaSimbolos.getInstance();
    public PilaSemantica pila = PilaSemantica.getInstance();

    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void guardarRSTipo(String tipo){
        RSTipo rsTipo = new RSTipo(tipo);
        this.pila.Push(rsTipo);
    }

    public void guardarRSVar(String ID, int linea, int columna){
        RSVar var = new RSVar(ID, linea, columna);
        this.pila.Push(var);
    }

    public void guardarAmbito(String ambito){
        this.pila.guardarVariable(ambito);
    }

    public void verificarAsignacion(String ID, int linea, int columna){
        this.pila.verificarAsignacion(ID, linea, columna);
    }

    public void verificarFuncion(String ID, int linea, int columna){
        this.pila.verificarFuncion(ID, linea, columna);
    }

    public void guardarOperador(String operador){
        RSOperador operadorRS = new RSOperador(operador);
        this.pila.Push(operadorRS);
    }

    public void guardarConstante(String numero, int linea, int columna){
        this.pila.constantFolding(numero, linea, columna);
    }

    public void startIf(int linea, int columna){
        this.pila.startIf(linea, columna);
    }

    public void startWhile(int linea, int columna){
        this.pila.startWhile(linea, columna);
    }

    public void endWhile(int linea, int columna){
        this.pila.endWhile(linea, columna);
    }

    public void endIf(int linea, int columna){
        this.pila.endIf(linea, columna);
    }

    public void comprobarCiclo(String nombre, int linea, int columna){
        this.pila.comprobarCiclo(nombre, linea, columna);
    }

    public void operacionIncDec(String nombre, int linea, int columna, String identificador){
        this.pila.operacionIncDec(nombre, linea, columna, identificador);
    }

    public void operacionRelacionales(String nombre, int linea, int columna){
        this.pila.operacionRelacionales(nombre, linea, columna);
    }

    public void recordarParametro(String nombre, int linea, int columna){
        RSVar parametro = new RSVar(nombre, linea, columna); 
        this.pila.Push(parametro);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Sintax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SW",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LONG_AUX ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TIPO ::= Void 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("void"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TIPO ::= Char 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("char"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIPO ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMS_LL ::= Identificador NT$13 PARAMS_LL_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$13 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.recordarParametro(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMS ::= TIPO Identificador NT$12 PARAMS_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$12 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarOperador(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERADOR ::= Menos 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarOperador(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERADOR ::= Mas 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarOperador(v1.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= Identificador Unarios 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.operacionIncDec(v1.toString(),v1right +1,v1left +1,v2.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= Numero 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarConstante(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= Literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.guardarConstante(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_FOR ::= error Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_FOR ::= TIPO Identificador NT$11 Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$11 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local FOR"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.comprobarCiclo(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WHILE ::= While Parentesis_a NT$10 SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.endWhile(v2right +1,v2left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$10 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 parser.startWhile(v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.endIf(v2right +1,v2left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.operacionRelacionales(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.operacionRelacionales(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.operacionRelacionales(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.operacionRelacionales(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a NT$9 SENTENCIA Llave_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$9 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
 parser.startIf(v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARRAY_AUX_CONST ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARRAY_AUX_CONST ::= Corchete_a Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY_AUX_CONST ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAY_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAY_AUX ::= Coma Identificador NT$8 ARRAY_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$8 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAY_AUX ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARRAY_AUX ::= Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAY_AUX ::= Corchete_a EXP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR_AUX_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VAR_AUX_LIST ::= Coma Identificador DECLARACION_VAR_AUX_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VAR_AUX_LIST ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX_LIST",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VAR ::= Const TIPO Identificador DECLARACION_VAR_AUX_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VAR ::= TIPO Identificador ARRAY_AUX NT$7 Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$7 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_VAR ::= Const TIPO Identificador NT$6 ARRAY_AUX_CONST Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RETURN_AUX_OPTIONS ::= Identificador Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RETURN_AUX_OPTIONS ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_AUX",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION_VAR ::= Identificador Asignacion NT$5 ARRAY_AUX_AUX Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 parser.verificarAsignacion(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.comprobarCiclo(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= Return RETURN_AUX_OPTIONS DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= Return Numero Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= Identificador Unarios NT$4 Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.operacionIncDec(v1.toString(),v1right +1,v1left +1,v2.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV NT$3 Parentesis_c Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
 parser.verificarFuncion(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES_INICIALES_AUX ::= error Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES_INICIALES_AUX ::= Coma Identificador NT$2 DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador NT$1 DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO Identificador NT$0 ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

