
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 26 16:40:51 CST 2022
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Scanner.Registros.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 26 16:40:51 CST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\070\002\000\002\042" +
    "\011\000\002\071\002\000\002\042\007\000\002\042\010" +
    "\000\002\042\006\000\002\042\002\000\002\043\003\000" +
    "\002\043\011\000\002\043\006\000\002\043\007\000\002" +
    "\043\002\000\002\002\004\000\002\072\002\000\002\003" +
    "\013\000\002\003\010\000\002\003\002\000\002\006\007" +
    "\000\002\006\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\006\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\044\006\000\002\044\006\000\002\033\003\000\002" +
    "\031\003\000\002\031\002\000\002\067\003\000\002\067" +
    "\004\000\002\073\002\000\002\007\011\000\002\074\002" +
    "\000\002\007\010\000\002\007\002\000\002\054\005\000" +
    "\002\054\004\000\002\054\003\000\002\054\002\000\002" +
    "\066\007\000\002\066\006\000\002\066\003\000\002\032" +
    "\004\000\002\032\004\000\002\055\003\000\002\055\005" +
    "\000\002\057\003\000\002\057\005\000\002\010\011\000" +
    "\002\010\011\000\002\010\007\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\011\007" +
    "\000\002\011\007\000\002\012\011\000\002\012\011\000" +
    "\002\013\012\000\002\013\012\000\002\052\004\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\075" +
    "\002\000\002\025\013\000\002\025\011\000\002\025\007" +
    "\000\002\026\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\037\003\000\002\037\002\000\002\076\002\000" +
    "\002\015\006\000\002\016\004\000\002\016\002\000\002" +
    "\040\003\000\002\040\002\000\002\077\002\000\002\035" +
    "\005\000\002\034\004\000\002\034\002\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\021\004\000\002\046\003\000\002" +
    "\046\004\000\002\047\003\000\002\047\002\000\002\020" +
    "\004\000\002\050\003\000\002\050\004\000\002\051\003" +
    "\000\002\051\002\000\002\053\007\000\002\053\007\000" +
    "\002\060\012\000\002\061\005\000\002\061\005\000\002" +
    "\061\002\000\002\062\005\000\002\062\003\000\002\063" +
    "\007\000\002\063\006\000\002\063\002\000\002\064\005" +
    "\000\002\064\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\020\002\ufffa\005\ufffa\010\ufffa\011\ufffa\017" +
    "\ufffa\021\ufffa\023\ufffa\001\002\000\004\002\u0135\001\002" +
    "\000\020\002\ufff0\005\013\010\012\011\007\017\014\021" +
    "\006\023\016\001\002\000\006\005\u0132\021\u0131\001\002" +
    "\000\014\005\013\010\012\017\014\021\006\023\016\001" +
    "\002\000\010\003\uff90\030\uff90\040\uff90\001\002\000\004" +
    "\002\ufff4\001\002\000\010\003\uff93\030\uff93\040\uff93\001" +
    "\002\000\010\003\uff94\030\uff94\040\uff94\001\002\000\006" +
    "\005\u0125\017\u0124\001\002\000\010\003\020\030\021\040" +
    "\022\001\002\000\010\003\uff92\030\uff92\040\uff92\001\002" +
    "\000\010\003\uff91\030\uff91\040\uff91\001\002\000\026\002" +
    "\ufff5\003\u010f\005\ufff5\010\ufff5\011\ufff5\017\ufff5\021\ufff5" +
    "\023\ufff5\032\u010c\041\u010e\001\002\000\026\002\ufffe\003" +
    "\ufffe\005\ufffe\010\ufffe\011\ufffe\017\ufffe\021\ufffe\023\ufffe" +
    "\032\ufffe\041\ufffe\001\002\000\004\032\023\001\002\000" +
    "\004\033\024\001\002\000\006\003\026\036\025\001\002" +
    "\000\052\003\uffd3\004\uffd3\005\013\006\uffd3\010\012\011" +
    "\030\013\uffd3\015\uffd3\016\uffd3\017\014\020\uffd3\021\006" +
    "\022\uffd3\023\016\024\uffd3\025\uffd3\030\uffd3\037\uffd3\053" +
    "\uffd3\054\uffd3\001\002\000\004\037\027\001\002\000\004" +
    "\002\ufff1\001\002\000\014\005\013\010\012\017\014\021" +
    "\006\023\016\001\002\000\036\003\ufff3\004\ufff3\006\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\020\ufff3\022\ufff3\024\ufff3\025" +
    "\ufff3\030\ufff3\037\ufff3\053\ufff3\054\ufff3\001\002\000\004" +
    "\030\033\001\002\000\010\003\uffd5\034\uffd5\041\uffd5\001" +
    "\002\000\010\003\035\034\036\041\uffcf\001\002\000\004" +
    "\041\uffd0\001\002\000\022\030\047\031\044\032\046\035" +
    "\045\042\051\047\053\050\043\051\050\001\002\000\004" +
    "\041\040\001\002\000\052\003\uffd3\004\uffd3\005\013\006" +
    "\uffd3\010\012\011\030\013\uffd3\015\uffd3\016\uffd3\017\014" +
    "\020\uffd3\021\006\022\uffd3\023\016\024\uffd3\025\uffd3\030" +
    "\uffd3\037\uffd3\053\uffd3\054\uffd3\001\002\000\036\003\uffd4" +
    "\004\uffd4\006\uffd4\013\uffd4\015\uffd4\016\uffd4\020\uffd4\022" +
    "\uffd4\024\uffd4\025\uffd4\030\uffd4\037\uffd4\053\uffd4\054\uffd4" +
    "\001\002\000\022\012\uffa4\033\uffa4\035\uffa4\037\uffa4\041" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\001\002\000\032\012\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\037\uffa2\041" +
    "\uffa2\042\uffa2\047\uffa2\050\uffa2\051\uffa2\001\002\000\022" +
    "\012\uffa6\033\uffa6\035\uffa6\037\uffa6\041\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\001\002\000\004\041\uffd1\001\002\000\020" +
    "\030\047\031\044\032\046\042\051\047\053\050\043\051" +
    "\050\001\002\000\022\012\uffa7\033\uffa7\035\uffa7\037\uffa7" +
    "\041\uffa7\047\uffa7\050\uffa7\051\uffa7\001\002\000\032\012" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1\037\uffa1" +
    "\041\uffa1\042\uffa1\047\uffa1\050\uffa1\051\uffa1\001\002\000" +
    "\022\012\uffa5\033\uffa5\035\uffa5\037\uffa5\041\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\001\002\000\012\035\054\047\053\050" +
    "\043\051\050\001\002\000\032\012\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\035\uffa3\037\uffa3\041\uffa3\042\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\001\002\000\004\041\uffd2\001\002" +
    "\000\020\030\047\031\044\032\046\042\051\047\053\050" +
    "\043\051\050\001\002\000\022\012\uffa9\033\uffa9\035\uffa9" +
    "\037\uffa9\041\uffa9\047\053\050\043\051\050\001\002\000" +
    "\012\033\060\047\053\050\043\051\050\001\002\000\022" +
    "\012\uffa8\033\uffa8\035\uffa8\037\uffa8\041\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\001\002\000\036\003\104\004\102\006\071" +
    "\013\062\015\106\016\065\020\103\022\105\024\107\025" +
    "\101\030\072\037\uffdf\053\064\054\111\001\002\000\004" +
    "\041\370\001\002\000\042\003\104\004\102\006\071\007" +
    "\uffdf\013\062\014\uffdf\015\106\016\065\020\103\022\105" +
    "\024\107\025\101\030\072\037\uffdf\053\064\054\111\001" +
    "\002\000\004\032\363\001\002\000\004\032\312\001\002" +
    "\000\042\003\104\004\102\006\071\007\uffdf\013\062\014" +
    "\uffdf\015\106\016\065\020\103\022\105\024\107\025\101" +
    "\030\072\037\uffdf\053\064\054\111\001\002\000\042\003" +
    "\104\004\102\006\071\007\uffdf\013\062\014\uffdf\015\106" +
    "\016\065\020\103\022\105\024\107\025\101\030\072\037" +
    "\uffdf\053\064\054\111\001\002\000\004\037\307\001\002" +
    "\000\004\041\305\001\002\000\006\032\265\043\266\001" +
    "\002\000\042\003\uffee\004\uffee\006\uffee\007\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\020\uffee\022\uffee\024\uffee\025" +
    "\uffee\030\uffee\037\uffee\053\uffee\054\uffee\001\002\000\044" +
    "\003\256\004\102\006\071\007\uffdf\013\062\014\uffdf\015" +
    "\106\016\065\020\103\022\105\024\107\025\101\026\254" +
    "\030\072\037\uffdf\053\064\054\111\001\002\000\042\003" +
    "\104\004\102\006\071\007\uffdf\013\062\014\uffdf\015\106" +
    "\016\065\020\103\022\105\024\107\025\101\030\072\037" +
    "\uffdf\053\064\054\111\001\002\000\042\003\104\004\102" +
    "\006\071\007\uffdf\013\062\014\uffdf\015\106\016\065\020" +
    "\103\022\105\024\107\025\101\030\072\037\uffdf\053\064" +
    "\054\111\001\002\000\042\003\104\004\102\006\071\007" +
    "\uffdf\013\062\014\uffdf\015\106\016\065\020\103\022\105" +
    "\024\107\025\101\030\072\037\uffdf\053\064\054\111\001" +
    "\002\000\004\041\247\001\002\000\004\032\233\001\002" +
    "\000\042\003\104\004\102\006\071\007\uffdf\013\062\014" +
    "\uffdf\015\106\016\065\020\103\022\105\024\107\025\101" +
    "\030\072\037\uffdf\053\064\054\111\001\002\000\010\030" +
    "\224\041\223\042\222\001\002\000\042\003\104\004\102" +
    "\006\071\007\uffdf\013\062\014\uffdf\015\106\016\065\020" +
    "\103\022\105\024\107\025\101\030\072\037\uffdf\053\064" +
    "\054\111\001\002\000\004\032\163\001\002\000\004\036" +
    "\152\001\002\000\004\032\126\001\002\000\042\003\104" +
    "\004\102\006\071\007\uffdf\013\062\014\uffdf\015\106\016" +
    "\065\020\103\022\105\024\107\025\101\030\072\037\uffdf" +
    "\053\064\054\111\001\002\000\004\032\112\001\002\000" +
    "\006\030\115\033\uff99\001\002\000\004\033\122\001\002" +
    "\000\004\033\uff9a\001\002\000\006\012\uff98\033\uff98\001" +
    "\002\000\006\012\120\033\uff95\001\002\000\004\033\uff97" +
    "\001\002\000\004\030\115\001\002\000\004\033\uff96\001" +
    "\002\000\004\041\123\001\002\000\042\003\uff85\004\uff85" +
    "\006\uff85\007\uff85\013\uff85\014\uff85\015\uff85\016\uff85\020" +
    "\uff85\022\uff85\024\uff85\025\uff85\030\uff85\037\uff85\053\uff85" +
    "\054\uff85\001\002\000\010\007\uffe9\014\uffe9\037\uffe9\001" +
    "\002\000\010\007\uffdc\014\uffdc\037\uffdc\001\002\000\022" +
    "\003\130\030\127\031\044\032\046\042\051\047\053\050" +
    "\043\051\050\001\002\000\024\027\143\033\uffa7\041\uffa7" +
    "\044\147\045\145\046\144\047\uffa7\050\uffa7\051\uffa7\001" +
    "\002\000\004\033\137\001\002\000\004\033\133\001\002" +
    "\000\014\033\uffc2\041\uffc2\047\053\050\043\051\050\001" +
    "\002\000\004\036\134\001\002\000\036\003\104\004\102" +
    "\006\071\013\062\015\106\016\065\020\103\022\105\024" +
    "\107\025\101\030\072\037\uffdf\053\064\054\111\001\002" +
    "\000\004\037\136\001\002\000\042\003\uffb9\004\uffb9\006" +
    "\uffb9\007\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9" +
    "\022\uffb9\024\uffb9\025\uffb9\030\uffb9\037\uffb9\053\uffb9\054" +
    "\uffb9\001\002\000\004\036\140\001\002\000\036\003\104" +
    "\004\102\006\071\013\062\015\106\016\065\020\103\022" +
    "\105\024\107\025\101\030\072\037\uffdf\053\064\054\111" +
    "\001\002\000\004\037\142\001\002\000\042\003\uffb8\004" +
    "\uffb8\006\uffb8\007\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\020\uffb8\022\uffb8\024\uffb8\025\uffb8\030\uffb8\037\uffb8\053" +
    "\uffb8\054\uffb8\001\002\000\022\003\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\042\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000" +
    "\022\003\uffbc\030\uffbc\031\uffbc\032\uffbc\042\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\001\002\000\022\003\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\042\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002" +
    "\000\022\003\150\030\047\031\044\032\046\042\051\047" +
    "\053\050\043\051\050\001\002\000\022\003\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\042\uffbd\047\uffbd\050\uffbd\051\uffbd\001" +
    "\002\000\006\033\uffc0\041\uffc0\001\002\000\014\033\uffc1" +
    "\041\uffc1\047\053\050\043\051\050\001\002\000\036\003" +
    "\104\004\102\006\071\013\062\015\106\016\065\020\103" +
    "\022\105\024\107\025\101\030\072\037\uffdf\053\064\054" +
    "\111\001\002\000\004\037\154\001\002\000\004\024\155" +
    "\001\002\000\004\032\156\001\002\000\022\003\157\030" +
    "\127\031\044\032\046\042\051\047\053\050\043\051\050" +
    "\001\002\000\004\033\162\001\002\000\004\033\161\001" +
    "\002\000\004\041\uffb7\001\002\000\004\041\uffb6\001\002" +
    "\000\006\030\165\031\164\001\002\000\004\033\uff78\001" +
    "\002\000\006\033\uff77\043\217\001\002\000\004\033\167" +
    "\001\002\000\004\036\170\001\002\000\010\007\uff7b\014" +
    "\uff7b\037\uff7b\001\002\000\010\007\172\014\173\037\uff80" +
    "\001\002\000\006\003\207\031\206\001\002\000\006\003" +
    "\176\055\177\001\002\000\004\037\175\001\002\000\042" +
    "\003\uff83\004\uff83\006\uff83\007\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\020\uff83\022\uff83\024\uff83\025\uff83\030\uff83" +
    "\037\uff83\053\uff83\054\uff83\001\002\000\040\003\104\004" +
    "\102\006\071\013\062\015\106\016\065\020\103\022\105" +
    "\024\107\025\101\030\072\036\202\037\uffdf\053\064\054" +
    "\111\001\002\000\040\003\104\004\102\006\071\013\062" +
    "\015\106\016\065\020\103\022\105\024\107\025\101\030" +
    "\072\036\202\037\uffdf\053\064\054\111\001\002\000\004" +
    "\037\uff82\001\002\000\004\037\uff7e\001\002\000\036\003" +
    "\104\004\102\006\071\013\062\015\106\016\065\020\103" +
    "\022\105\024\107\025\101\030\072\037\uffdf\053\064\054" +
    "\111\001\002\000\004\037\204\001\002\000\004\037\uff7f" +
    "\001\002\000\004\037\uff81\001\002\000\004\055\215\001" +
    "\002\000\044\003\104\004\102\006\071\007\uffdf\013\062" +
    "\014\uffdf\015\106\016\065\020\103\022\105\024\107\025" +
    "\101\030\072\036\211\037\uffdf\053\064\054\111\001\002" +
    "\000\010\007\uff79\014\uff79\037\uff79\001\002\000\036\003" +
    "\104\004\102\006\071\013\062\015\106\016\065\020\103" +
    "\022\105\024\107\025\101\030\072\037\uffdf\053\064\054" +
    "\111\001\002\000\010\007\uff7c\014\uff7c\037\uff7c\001\002" +
    "\000\004\037\214\001\002\000\010\007\uff7a\014\uff7a\037" +
    "\uff7a\001\002\000\044\003\104\004\102\006\071\007\uffdf" +
    "\013\062\014\uffdf\015\106\016\065\020\103\022\105\024" +
    "\107\025\101\030\072\036\211\037\uffdf\053\064\054\111" +
    "\001\002\000\010\007\uff7d\014\uff7d\037\uff7d\001\002\000" +
    "\004\031\220\001\002\000\004\033\uff76\001\002\000\010" +
    "\007\uffe0\014\uffe0\037\uffe0\001\002\000\004\041\230\001" +
    "\002\000\042\003\uffd9\004\uffd9\006\uffd9\007\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\024\uffd9\025" +
    "\uffd9\030\uffd9\037\uffd9\053\uffd9\054\uffd9\001\002\000\004" +
    "\041\227\001\002\000\042\003\104\004\102\006\071\007" +
    "\uffdf\013\062\014\uffdf\015\106\016\065\020\103\022\105" +
    "\024\107\025\101\030\072\037\uffdf\053\064\054\111\001" +
    "\002\000\010\007\uffe3\014\uffe3\037\uffe3\001\002\000\042" +
    "\003\uffd8\004\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\030\uffd8" +
    "\037\uffd8\053\uffd8\054\uffd8\001\002\000\042\003\104\004" +
    "\102\006\071\007\uffdf\013\062\014\uffdf\015\106\016\065" +
    "\020\103\022\105\024\107\025\101\030\072\037\uffdf\053" +
    "\064\054\111\001\002\000\010\007\uffe4\014\uffe4\037\uffe4" +
    "\001\002\000\010\007\uffe1\014\uffe1\037\uffe1\001\002\000" +
    "\022\003\234\030\127\031\044\032\046\042\051\047\053" +
    "\050\043\051\050\001\002\000\004\033\243\001\002\000" +
    "\004\033\236\001\002\000\006\003\240\036\237\001\002" +
    "\000\036\003\104\004\102\006\071\013\062\015\106\016" +
    "\065\020\103\022\105\024\107\025\101\030\072\037\uffdf" +
    "\053\064\054\111\001\002\000\044\003\uffc3\004\uffc3\006" +
    "\uffc3\007\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3" +
    "\022\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\037\uffc3\053" +
    "\uffc3\054\uffc3\001\002\000\004\037\242\001\002\000\044" +
    "\003\uffc5\004\uffc5\006\uffc5\007\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\030\uffc5\037\uffc5\053\uffc5\054\uffc5\001\002\000\004\036" +
    "\244\001\002\000\036\003\104\004\102\006\071\013\062" +
    "\015\106\016\065\020\103\022\105\024\107\025\101\030" +
    "\072\037\uffdf\053\064\054\111\001\002\000\004\037\246" +
    "\001\002\000\044\003\uffc4\004\uffc4\006\uffc4\007\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\030\uffc4\037\uffc4\053\uffc4\054\uffc4\001" +
    "\002\000\042\003\104\004\102\006\071\007\uffdf\013\062" +
    "\014\uffdf\015\106\016\065\020\103\022\105\024\107\025" +
    "\101\030\072\037\uffdf\053\064\054\111\001\002\000\010" +
    "\007\uffea\014\uffea\037\uffea\001\002\000\010\007\uffe8\014" +
    "\uffe8\037\uffe8\001\002\000\010\007\uffec\014\uffec\037\uffec" +
    "\001\002\000\010\007\uffe7\014\uffe7\037\uffe7\001\002\000" +
    "\004\036\262\001\002\000\010\007\uffed\014\uffed\037\uffed" +
    "\001\002\000\044\003\104\004\102\006\071\007\uffdf\013" +
    "\062\014\uffdf\015\106\016\065\020\103\022\105\024\107" +
    "\025\101\030\072\036\257\037\uffdf\053\064\054\111\001" +
    "\002\000\036\003\104\004\102\006\071\013\062\015\106" +
    "\016\065\020\103\022\105\024\107\025\101\030\072\037" +
    "\uffdf\053\064\054\111\001\002\000\004\037\261\001\002" +
    "\000\042\003\uffba\004\uffba\006\uffba\007\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\020\uffba\022\uffba\024\uffba\025\uffba" +
    "\030\uffba\037\uffba\053\uffba\054\uffba\001\002\000\036\003" +
    "\104\004\102\006\071\013\062\015\106\016\065\020\103" +
    "\022\105\024\107\025\101\030\072\037\uffdf\053\064\054" +
    "\111\001\002\000\004\037\264\001\002\000\042\003\uffbb" +
    "\004\uffbb\006\uffbb\007\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\030\uffbb\037\uffbb" +
    "\053\uffbb\054\uffbb\001\002\000\006\030\115\033\uff99\001" +
    "\002\000\024\003\270\030\047\031\044\032\046\036\271" +
    "\042\051\047\053\050\043\051\050\001\002\000\004\041" +
    "\301\001\002\000\004\041\300\001\002\000\020\030\047" +
    "\031\044\032\046\042\051\047\053\050\043\051\050\001" +
    "\002\000\012\041\uffc9\047\053\050\043\051\050\001\002" +
    "\000\004\037\277\001\002\000\014\012\275\037\uffc7\047" +
    "\053\050\043\051\050\001\002\000\020\030\047\031\044" +
    "\032\046\042\051\047\053\050\043\051\050\001\002\000" +
    "\004\037\uffc6\001\002\000\004\041\uffc8\001\002\000\042" +
    "\003\uffdd\004\uffdd\006\uffdd\007\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\022\uffdd\024\uffdd\025\uffdd\030\uffdd" +
    "\037\uffdd\053\uffdd\054\uffdd\001\002\000\042\003\uffde\004" +
    "\uffde\006\uffde\007\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\020\uffde\022\uffde\024\uffde\025\uffde\030\uffde\037\uffde\053" +
    "\uffde\054\uffde\001\002\000\004\033\303\001\002\000\004" +
    "\041\304\001\002\000\042\003\uffef\004\uffef\006\uffef\007" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef\022\uffef" +
    "\024\uffef\025\uffef\030\uffef\037\uffef\053\uffef\054\uffef\001" +
    "\002\000\042\003\104\004\102\006\071\007\uffdf\013\062" +
    "\014\uffdf\015\106\016\065\020\103\022\105\024\107\025" +
    "\101\030\072\037\uffdf\053\064\054\111\001\002\000\010" +
    "\007\uffe2\014\uffe2\037\uffe2\001\002\000\004\002\ufff2\001" +
    "\002\000\010\007\uffe6\014\uffe6\037\uffe6\001\002\000\010" +
    "\007\uffeb\014\uffeb\037\uffeb\001\002\000\020\003\316\005" +
    "\013\010\012\017\014\021\006\023\016\030\315\001\002" +
    "\000\004\033\354\001\002\000\004\030\344\001\002\000" +
    "\004\043\336\001\002\000\006\033\320\041\317\001\002" +
    "\000\020\030\127\031\044\032\046\042\051\047\053\050" +
    "\043\051\050\001\002\000\004\036\321\001\002\000\036" +
    "\003\104\004\102\006\071\013\062\015\106\016\065\020" +
    "\103\022\105\024\107\025\101\030\072\037\uffdf\053\064" +
    "\054\111\001\002\000\004\037\323\001\002\000\042\003" +
    "\uffb3\004\uffb3\006\uffb3\007\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\020\uffb3\022\uffb3\024\uffb3\025\uffb3\030\uffb3\037" +
    "\uffb3\053\uffb3\054\uffb3\001\002\000\004\041\325\001\002" +
    "\000\010\003\330\030\331\052\326\001\002\000\004\030" +
    "\335\001\002\000\004\033\uffae\001\002\000\004\033\uffaa" +
    "\001\002\000\006\043\333\052\332\001\002\000\004\033" +
    "\uffac\001\002\000\004\042\334\001\002\000\004\033\uffad" +
    "\001\002\000\004\033\uffab\001\002\000\020\030\047\031" +
    "\044\032\046\042\051\047\053\050\043\051\050\001\002" +
    "\000\012\041\340\047\053\050\043\051\050\001\002\000" +
    "\020\030\127\031\044\032\046\042\051\047\053\050\043" +
    "\051\050\001\002\000\004\041\342\001\002\000\010\003" +
    "\330\030\331\052\326\001\002\000\004\033\uffaf\001\002" +
    "\000\004\043\uffb1\001\002\000\004\043\346\001\002\000" +
    "\020\030\047\031\044\032\046\042\051\047\053\050\043" +
    "\051\050\001\002\000\012\041\350\047\053\050\043\051" +
    "\050\001\002\000\020\030\127\031\044\032\046\042\051" +
    "\047\053\050\043\051\050\001\002\000\004\041\352\001" +
    "\002\000\010\003\330\030\331\052\326\001\002\000\004" +
    "\033\uffb0\001\002\000\006\003\356\036\355\001\002\000" +
    "\036\003\104\004\102\006\071\013\062\015\106\016\065" +
    "\020\103\022\105\024\107\025\101\030\072\037\uffdf\053" +
    "\064\054\111\001\002\000\036\003\104\004\102\006\071" +
    "\013\062\015\106\016\065\020\103\022\105\024\107\025" +
    "\101\030\072\037\uffdf\053\064\054\111\001\002\000\004" +
    "\037\360\001\002\000\042\003\uffb2\004\uffb2\006\uffb2\007" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\022\uffb2" +
    "\024\uffb2\025\uffb2\030\uffb2\037\uffb2\053\uffb2\054\uffb2\001" +
    "\002\000\004\037\362\001\002\000\042\003\uffb4\004\uffb4" +
    "\006\uffb4\007\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020" +
    "\uffb4\022\uffb4\024\uffb4\025\uffb4\030\uffb4\037\uffb4\053\uffb4" +
    "\054\uffb4\001\002\000\004\030\115\001\002\000\004\033" +
    "\365\001\002\000\004\041\366\001\002\000\042\003\uff84" +
    "\004\uff84\006\uff84\007\uff84\013\uff84\014\uff84\015\uff84\016" +
    "\uff84\020\uff84\022\uff84\024\uff84\025\uff84\030\uff84\037\uff84" +
    "\053\uff84\054\uff84\001\002\000\010\007\uffe5\014\uffe5\037" +
    "\uffe5\001\002\000\042\003\uffb5\004\uffb5\006\uffb5\007\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5\024" +
    "\uffb5\025\uffb5\030\uffb5\037\uffb5\053\uffb5\054\uffb5\001\002" +
    "\000\004\030\372\001\002\000\006\034\uffd7\043\uffd7\001" +
    "\002\000\006\034\375\043\376\001\002\000\004\041\uffcc" +
    "\001\002\000\022\030\047\031\044\032\046\035\u0104\042" +
    "\051\047\053\050\043\051\050\001\002\000\022\003\u0102" +
    "\030\047\031\044\032\046\042\051\047\053\050\043\051" +
    "\050\001\002\000\004\041\u0100\001\002\000\052\003\uffd3" +
    "\004\uffd3\005\013\006\uffd3\010\012\011\030\013\uffd3\015" +
    "\uffd3\016\uffd3\017\014\020\uffd3\021\006\022\uffd3\023\016" +
    "\024\uffd3\025\uffd3\030\uffd3\037\uffd3\053\uffd3\054\uffd3\001" +
    "\002\000\036\003\uffd6\004\uffd6\006\uffd6\013\uffd6\015\uffd6" +
    "\016\uffd6\020\uffd6\022\uffd6\024\uffd6\025\uffd6\030\uffd6\037" +
    "\uffd6\053\uffd6\054\uffd6\001\002\000\004\041\uffca\001\002" +
    "\000\012\041\uffcb\047\053\050\043\051\050\001\002\000" +
    "\004\043\u0109\001\002\000\012\035\u0106\047\053\050\043" +
    "\051\050\001\002\000\004\043\u0107\001\002\000\022\030" +
    "\047\031\044\032\046\036\271\042\051\047\053\050\043" +
    "\051\050\001\002\000\004\041\uffce\001\002\000\022\030" +
    "\047\031\044\032\046\036\271\042\051\047\053\050\043" +
    "\051\050\001\002\000\004\041\uffcd\001\002\000\026\002" +
    "\ufff5\003\u010f\005\ufff5\010\ufff5\011\ufff5\017\ufff5\021\ufff5" +
    "\023\ufff5\032\u010c\041\u010e\001\002\000\016\005\013\010" +
    "\012\017\014\021\006\023\016\033\uff9f\001\002\000\020" +
    "\002\ufffd\005\ufffd\010\ufffd\011\ufffd\017\ufffd\021\ufffd\023" +
    "\ufffd\001\002\000\020\002\ufff9\005\ufff9\010\ufff9\011\ufff9" +
    "\017\ufff9\021\ufff9\023\ufff9\001\002\000\004\036\u0110\001" +
    "\002\000\052\003\uffd3\004\uffd3\005\013\006\uffd3\010\012" +
    "\011\030\013\uffd3\015\uffd3\016\uffd3\017\014\020\uffd3\021" +
    "\006\022\uffd3\023\016\024\uffd3\025\uffd3\030\uffd3\037\uffd3" +
    "\053\uffd3\054\uffd3\001\002\000\036\003\104\004\102\006" +
    "\071\013\062\015\106\016\065\020\103\022\105\024\107" +
    "\025\101\030\072\037\uffdf\053\064\054\111\001\002\000" +
    "\004\037\u0113\001\002\000\020\002\ufff6\005\ufff6\010\ufff6" +
    "\011\ufff6\017\ufff6\021\ufff6\023\ufff6\001\002\000\004\033" +
    "\uffa0\001\002\000\004\033\u011c\001\002\000\004\030\u0117" +
    "\001\002\000\006\012\uff9e\033\uff9e\001\002\000\006\012" +
    "\u011a\033\uff9b\001\002\000\004\033\uff9d\001\002\000\014" +
    "\005\013\010\012\017\014\021\006\023\016\001\002\000" +
    "\004\033\uff9c\001\002\000\006\036\u011d\041\u011e\001\002" +
    "\000\052\003\uffd3\004\uffd3\005\013\006\uffd3\010\012\011" +
    "\030\013\uffd3\015\uffd3\016\uffd3\017\014\020\uffd3\021\006" +
    "\022\uffd3\023\016\024\uffd3\025\uffd3\030\uffd3\037\uffd3\053" +
    "\uffd3\054\uffd3\001\002\000\020\002\ufff7\005\ufff7\010\ufff7" +
    "\011\ufff7\017\ufff7\021\ufff7\023\ufff7\001\002\000\036\003" +
    "\104\004\102\006\071\013\062\015\106\016\065\020\103" +
    "\022\105\024\107\025\101\030\072\037\uffdf\053\064\054" +
    "\111\001\002\000\004\037\u0121\001\002\000\020\002\ufff8" +
    "\005\ufff8\010\ufff8\011\ufff8\017\ufff8\021\ufff8\023\ufff8\001" +
    "\002\000\020\002\ufffb\005\ufffb\010\ufffb\011\ufffb\017\ufffb" +
    "\021\ufffb\023\ufffb\001\002\000\010\003\uff8a\030\uff8a\040" +
    "\uff8a\001\002\000\012\003\uff86\005\u0127\030\uff86\040\uff86" +
    "\001\002\000\010\003\uff89\030\uff89\040\uff89\001\002\000" +
    "\010\003\uff88\030\uff88\040\uff88\001\002\000\010\003\uff87" +
    "\030\uff87\040\uff87\001\002\000\006\003\u0129\030\u012a\001" +
    "\002\000\006\034\375\043\376\001\002\000\006\034\000" +
    "\043\000\001\002\000\006\034\375\043\376\001\002\000" +
    "\004\041\u012d\001\002\000\020\002\uffff\005\uffff\010\uffff" +
    "\011\uffff\017\uffff\021\uffff\023\uffff\001\002\000\004\041" +
    "\u012f\001\002\000\020\002\ufffc\005\ufffc\010\ufffc\011\ufffc" +
    "\017\ufffc\021\ufffc\023\ufffc\001\002\000\010\003\uff8f\030" +
    "\uff8f\040\uff8f\001\002\000\012\003\uff8b\005\u0134\030\uff8b" +
    "\040\uff8b\001\002\000\010\003\uff8e\030\uff8e\040\uff8e\001" +
    "\002\000\010\003\uff8d\030\uff8d\040\uff8d\001\002\000\010" +
    "\003\uff8c\030\uff8c\040\uff8c\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\010\017\014\020\007\021\016\001\001" +
    "\000\004\046\u012f\001\001\000\010\017\u0127\020\007\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0121\001\001\000\004\071\u010a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\030" +
    "\017\031\020\007\021\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\370\020\007\021\016\001\001" +
    "\000\004\072\060\001\001\000\002\001\001\000\004\074" +
    "\033\001\001\000\004\054\036\001\001\000\002\001\001" +
    "\000\006\022\051\027\041\001\001\000\002\001\001\000" +
    "\012\007\040\017\031\020\007\021\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\056\027\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\055\027\041\001\001\000\004\027\054\001" +
    "\001\000\004\027\054\001\001\000\002\001\001\000\030" +
    "\005\067\006\074\010\073\011\075\012\065\013\077\014" +
    "\107\044\066\052\062\053\072\060\076\001\001\000\002" +
    "\001\001\000\032\005\124\006\074\010\073\011\075\012" +
    "\065\013\077\014\107\033\366\044\066\052\062\053\072" +
    "\060\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\124\006\074\010\073\011\075\012\065\013\077" +
    "\014\107\033\310\044\066\052\062\053\072\060\076\001" +
    "\001\000\032\005\124\006\074\010\073\011\075\012\065" +
    "\013\077\014\107\033\307\044\066\052\062\053\072\060" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\124\006\074\010" +
    "\073\011\075\012\065\013\077\014\107\033\254\044\066" +
    "\052\062\053\072\060\076\001\001\000\032\005\124\006" +
    "\074\010\073\011\075\012\065\013\077\014\107\033\252" +
    "\044\066\052\062\053\072\060\076\001\001\000\032\005" +
    "\124\006\074\010\073\011\075\012\065\013\077\014\107" +
    "\033\251\044\066\052\062\053\072\060\076\001\001\000" +
    "\032\005\124\006\074\010\073\011\075\012\065\013\077" +
    "\014\107\033\250\044\066\052\062\053\072\060\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\231" +
    "\006\074\010\073\011\075\012\065\013\077\014\107\044" +
    "\066\052\062\053\072\060\076\001\001\000\004\067\224" +
    "\001\001\000\032\005\124\006\074\010\073\011\075\012" +
    "\065\013\077\014\107\033\220\044\066\052\062\053\072" +
    "\060\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\124\006\074\010\073\011\075" +
    "\012\065\013\077\014\107\033\123\044\066\052\062\053" +
    "\072\060\076\001\001\000\002\001\001\000\006\035\113" +
    "\040\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\115\001\001\000\004\034\116\001\001\000\002" +
    "\001\001\000\004\035\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\131\023\130\027\041\001\001\000" +
    "\004\030\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\054\001\001\000\002\001\001\000\030\005" +
    "\134\006\074\010\073\011\075\012\065\013\077\014\107" +
    "\044\066\052\062\053\072\060\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\140" +
    "\006\074\010\073\011\075\012\065\013\077\014\107\044" +
    "\066\052\062\053\072\060\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\150\027\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\054\001\001\000" +
    "\030\005\152\006\074\010\073\011\075\012\065\013\077" +
    "\014\107\044\066\052\062\053\072\060\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\131\023\157\027\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\170\001\001" +
    "\000\004\061\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\200" +
    "\006\074\010\073\011\075\012\065\013\077\014\107\044" +
    "\066\052\062\053\072\060\076\062\204\001\001\000\032" +
    "\005\200\006\074\010\073\011\075\012\065\013\077\014" +
    "\107\044\066\052\062\053\072\060\076\062\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\202\006" +
    "\074\010\073\011\075\012\065\013\077\014\107\044\066" +
    "\052\062\053\072\060\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\207\006\074\010\073\011\075\012\065\013\077\014" +
    "\107\044\066\052\062\053\072\060\076\064\211\001\001" +
    "\000\002\001\001\000\030\005\212\006\074\010\073\011" +
    "\075\012\065\013\077\014\107\044\066\052\062\053\072" +
    "\060\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\207\006\074\010\073\011\075" +
    "\012\065\013\077\014\107\044\066\052\062\053\072\060" +
    "\076\064\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\124\006\074" +
    "\010\073\011\075\012\065\013\077\014\107\033\225\044" +
    "\066\052\062\053\072\060\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\124\006\074\010\073\011" +
    "\075\012\065\013\077\014\107\033\230\044\066\052\062" +
    "\053\072\060\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\131\023\234\027\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\240\006\074\010\073\011\075\012\065\013\077\014\107" +
    "\044\066\052\062\053\072\060\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\244\006\074\010\073\011\075\012\065\013" +
    "\077\014\107\044\066\052\062\053\072\060\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\124\006" +
    "\074\010\073\011\075\012\065\013\077\014\107\033\247" +
    "\044\066\052\062\053\072\060\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\124\006" +
    "\074\010\073\011\075\012\065\013\077\014\107\033\220" +
    "\044\066\052\062\053\072\060\076\001\001\000\030\005" +
    "\257\006\074\010\073\011\075\012\065\013\077\014\107" +
    "\044\066\052\062\053\072\060\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\262\006\074\010\073" +
    "\011\075\012\065\013\077\014\107\044\066\052\062\053" +
    "\072\060\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\113\040\301\001\001\000\010\022\271\027" +
    "\041\055\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\273\027\041\057\272\001\001\000\004\027" +
    "\054\001\001\000\002\001\001\000\004\027\054\001\001" +
    "\000\010\022\273\027\041\057\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\124\006\074\010\073\011\075\012\065\013\077" +
    "\014\107\033\305\044\066\052\062\053\072\060\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\313\020\007\021\016\025" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\131\023\323\027" +
    "\041\001\001\000\002\001\001\000\030\005\321\006\074" +
    "\010\073\011\075\012\065\013\077\014\107\044\066\052" +
    "\062\053\072\060\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\336\027\041\001\001" +
    "\000\004\027\054\001\001\000\010\022\131\023\340\027" +
    "\041\001\001\000\002\001\001\000\004\026\342\001\001" +
    "\000\002\001\001\000\004\075\344\001\001\000\002\001" +
    "\001\000\006\022\346\027\041\001\001\000\004\027\054" +
    "\001\001\000\010\022\131\023\350\027\041\001\001\000" +
    "\002\001\001\000\004\026\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\360\006\074\010\073\011" +
    "\075\012\065\013\077\014\107\044\066\052\062\053\072" +
    "\060\076\001\001\000\030\005\356\006\074\010\073\011" +
    "\075\012\065\013\077\014\107\044\066\052\062\053\072" +
    "\060\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\372\001\001\000\006\032\373\066\376\001\001\000" +
    "\002\001\001\000\006\022\u0104\027\041\001\001\000\006" +
    "\022\u0102\027\041\001\001\000\002\001\001\000\012\007" +
    "\u0100\017\031\020\007\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\054\001\001\000\002\001" +
    "\001\000\004\027\054\001\001\000\002\001\001\000\010" +
    "\022\271\027\041\055\u0107\001\001\000\002\001\001\000" +
    "\010\022\271\027\041\055\u0109\001\001\000\002\001\001" +
    "\000\004\043\u010c\001\001\000\014\015\u0113\017\u0115\020" +
    "\007\021\016\037\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u0110\017\031\020" +
    "\007\021\016\001\001\000\030\005\u0111\006\074\010\073" +
    "\011\075\012\065\013\077\014\107\044\066\052\062\053" +
    "\072\060\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\u0117\001\001\000\004\016\u0118\001\001\000\002" +
    "\001\001\000\012\015\u011a\017\u0115\020\007\021\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u011e" +
    "\017\031\020\007\021\016\001\001\000\002\001\001\000" +
    "\030\005\u011f\006\074\010\073\011\075\012\065\013\077" +
    "\014\107\044\066\052\062\053\072\060\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\373\066\u012d\001\001\000\004\070\u012a\001\001\000" +
    "\006\032\373\066\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();
    
    public TablaSimbolos tabla = TablaSimbolos.getInstance();
    public PilaSemantica pila = PilaSemantica.getInstance();

    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
        this.errores.add("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void guardarRSTipo(String tipo){
        RSTipo rsTipo = new RSTipo(tipo);
        this.pila.Push(rsTipo);
    }

    public void guardarRSVar(String ID, int linea, int columna){
        RSVar var = new RSVar(ID, linea, columna);
        this.pila.Push(var);
    }

    public void guardarAmbito(String ambito){
        this.pila.guardarVariable(ambito);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Sintax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LONG_AUX ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO ::= Void 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("void"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO ::= Char 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("char"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO ::= Int 
            {
              Object RESULT =null;
		 parser.guardarRSTipo("int"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMS_LL ::= Identificador NT$7 PARAMS_LL_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$7 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMS ::= TIPO Identificador NT$6 PARAMS_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$6 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Parametro"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_FOR ::= error Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_FOR ::= TIPO Identificador NT$5 Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local FOR"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARRAY_AUX_CONST ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARRAY_AUX_CONST ::= Corchete_a Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARRAY_AUX_CONST ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARRAY_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARRAY_AUX ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRAY_AUX ::= Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARRAY_AUX ::= Corchete_a EXP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_VAR ::= TIPO Identificador NT$4 ARRAY_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VAR ::= Const TIPO Identificador NT$3 ARRAY_AUX_CONST Scolon DECLARACION_VAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$3 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Local"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETURN_AUX_OPTIONS ::= Identificador Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETURN_AUX_OPTIONS ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION_VAR ::= Identificador Asignacion ARRAY_AUX_AUX Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= Return RETURN_AUX_OPTIONS DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= Return Numero Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR NT$2 SENTENCIA Llave_c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES_INICIALES_AUX ::= error Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 parser.guardarAmbito("Funcion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador NT$1 DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO Identificador NT$0 ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.guardarRSVar(v1.toString(),v1right +1,v1left +1); parser.guardarAmbito("Global"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

