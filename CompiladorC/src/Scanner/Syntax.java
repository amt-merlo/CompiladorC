
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 06 18:18:03 CST 2022
//----------------------------------------------------

package Scanner;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 06 18:18:03 CST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\042\010\000\002\042" +
    "\006\000\002\042\010\000\002\042\006\000\002\042\002" +
    "\000\002\043\003\000\002\043\011\000\002\043\006\000" +
    "\002\043\007\000\002\043\002\000\002\002\004\000\002" +
    "\003\012\000\002\003\010\000\002\003\002\000\002\006" +
    "\007\000\002\006\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\006\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\002" +
    "\000\002\044\006\000\002\044\006\000\002\033\003\000" +
    "\002\031\003\000\002\031\002\000\002\067\003\000\002" +
    "\067\004\000\002\007\010\000\002\007\007\000\002\007" +
    "\002\000\002\054\005\000\002\054\004\000\002\054\003" +
    "\000\002\054\002\000\002\066\007\000\002\066\006\000" +
    "\002\066\003\000\002\032\004\000\002\032\004\000\002" +
    "\055\003\000\002\055\005\000\002\057\003\000\002\057" +
    "\005\000\002\010\011\000\002\010\011\000\002\010\007" +
    "\000\002\023\003\000\002\023\005\000\002\023\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\011\007\000\002\011\007\000\002\012" +
    "\011\000\002\012\011\000\002\013\012\000\002\013\012" +
    "\000\002\052\004\000\002\014\011\000\002\014\011\000" +
    "\002\014\011\000\002\025\012\000\002\025\011\000\002" +
    "\025\007\000\002\026\005\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\037\003\000\002\037\002\000\002\015" +
    "\005\000\002\016\004\000\002\016\002\000\002\040\003" +
    "\000\002\040\002\000\002\035\004\000\002\034\004\000" +
    "\002\034\002\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\004\000\002\046\003\000\002\046\004\000\002\047\003" +
    "\000\002\047\002\000\002\020\004\000\002\050\003\000" +
    "\002\050\004\000\002\051\003\000\002\051\002\000\002" +
    "\053\007\000\002\053\007\000\002\060\012\000\002\061" +
    "\005\000\002\061\005\000\002\061\002\000\002\062\005" +
    "\000\002\062\003\000\002\063\007\000\002\063\006\000" +
    "\002\063\002\000\002\064\005\000\002\064\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\020\002\ufffc\005\ufffc\010\ufffc\011\ufffc\017" +
    "\ufffc\021\ufffc\023\ufffc\001\002\000\004\002\u012d\001\002" +
    "\000\020\002\ufff3\005\013\010\012\011\007\017\014\021" +
    "\006\023\016\001\002\000\006\005\u012a\021\u0129\001\002" +
    "\000\014\005\013\010\012\017\014\021\006\023\016\001" +
    "\002\000\010\003\uff98\030\uff98\040\uff98\001\002\000\004" +
    "\002\ufff6\001\002\000\010\003\uff9b\030\uff9b\040\uff9b\001" +
    "\002\000\010\003\uff9c\030\uff9c\040\uff9c\001\002\000\006" +
    "\005\u011e\017\u011d\001\002\000\010\003\020\030\022\040" +
    "\021\001\002\000\010\003\uff9a\030\uff9a\040\uff9a\001\002" +
    "\000\010\003\uff99\030\uff99\040\uff99\001\002\000\026\002" +
    "\ufff7\003\026\005\ufff7\010\ufff7\011\ufff7\017\ufff7\021\ufff7" +
    "\023\ufff7\032\024\041\025\001\002\000\004\032\u0113\001" +
    "\002\000\026\002\ufff7\003\026\005\ufff7\010\ufff7\011\ufff7" +
    "\017\ufff7\021\ufff7\023\ufff7\032\024\041\025\001\002\000" +
    "\020\002\uffff\005\uffff\010\uffff\011\uffff\017\uffff\021\uffff" +
    "\023\uffff\001\002\000\016\005\013\010\012\017\014\021" +
    "\006\023\016\033\uffa5\001\002\000\020\002\ufffb\005\ufffb" +
    "\010\ufffb\011\ufffb\017\ufffb\021\ufffb\023\ufffb\001\002\000" +
    "\004\036\027\001\002\000\052\003\uffd8\004\uffd8\005\013" +
    "\006\uffd8\010\012\011\030\013\uffd8\015\uffd8\016\uffd8\017" +
    "\014\020\uffd8\021\006\022\uffd8\023\016\024\uffd8\025\uffd8" +
    "\030\uffd8\037\uffd8\053\uffd8\054\uffd8\001\002\000\014\005" +
    "\013\010\012\017\014\021\006\023\016\001\002\000\036" +
    "\003\102\004\101\006\067\013\060\015\104\016\063\020" +
    "\100\022\103\024\106\025\077\030\071\037\uffe2\053\061" +
    "\054\107\001\002\000\004\030\033\001\002\000\010\003" +
    "\034\034\035\041\uffd4\001\002\000\004\041\uffd5\001\002" +
    "\000\022\030\046\031\043\032\045\035\044\042\050\047" +
    "\052\050\042\051\047\001\002\000\004\041\037\001\002" +
    "\000\052\003\uffd8\004\uffd8\005\013\006\uffd8\010\012\011" +
    "\030\013\uffd8\015\uffd8\016\uffd8\017\014\020\uffd8\021\006" +
    "\022\uffd8\023\016\024\uffd8\025\uffd8\030\uffd8\037\uffd8\053" +
    "\uffd8\054\uffd8\001\002\000\036\003\uffd9\004\uffd9\006\uffd9" +
    "\013\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\024\uffd9\025" +
    "\uffd9\030\uffd9\037\uffd9\053\uffd9\054\uffd9\001\002\000\022" +
    "\012\uffaa\033\uffaa\035\uffaa\037\uffaa\041\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\001\002\000\032\012\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\035\uffa8\037\uffa8\041\uffa8\042\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\001\002\000\022\012\uffac\033\uffac" +
    "\035\uffac\037\uffac\041\uffac\047\uffac\050\uffac\051\uffac\001" +
    "\002\000\004\041\uffd6\001\002\000\020\030\046\031\043" +
    "\032\045\042\050\047\052\050\042\051\047\001\002\000" +
    "\022\012\uffad\033\uffad\035\uffad\037\uffad\041\uffad\047\uffad" +
    "\050\uffad\051\uffad\001\002\000\032\012\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\035\uffa7\037\uffa7\041\uffa7\042\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\001\002\000\022\012\uffab\033" +
    "\uffab\035\uffab\037\uffab\041\uffab\047\uffab\050\uffab\051\uffab" +
    "\001\002\000\012\035\053\047\052\050\042\051\047\001" +
    "\002\000\032\012\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\035\uffa9\037\uffa9\041\uffa9\042\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\001\002\000\004\041\uffd7\001\002\000\020\030\046" +
    "\031\043\032\045\042\050\047\052\050\042\051\047\001" +
    "\002\000\022\012\uffaf\033\uffaf\035\uffaf\037\uffaf\041\uffaf" +
    "\047\052\050\042\051\047\001\002\000\012\033\057\047" +
    "\052\050\042\051\047\001\002\000\022\012\uffae\033\uffae" +
    "\035\uffae\037\uffae\041\uffae\047\uffae\050\uffae\051\uffae\001" +
    "\002\000\004\041\364\001\002\000\004\032\360\001\002" +
    "\000\042\003\102\004\101\006\067\007\uffe2\013\060\014" +
    "\uffe2\015\104\016\063\020\100\022\103\024\106\025\077" +
    "\030\071\037\uffe2\053\061\054\107\001\002\000\004\032" +
    "\307\001\002\000\042\003\102\004\101\006\067\007\uffe2" +
    "\013\060\014\uffe2\015\104\016\063\020\100\022\103\024" +
    "\106\025\077\030\071\037\uffe2\053\061\054\107\001\002" +
    "\000\042\003\102\004\101\006\067\007\uffe2\013\060\014" +
    "\uffe2\015\104\016\063\020\100\022\103\024\106\025\077" +
    "\030\071\037\uffe2\053\061\054\107\001\002\000\004\037" +
    "\304\001\002\000\004\041\302\001\002\000\042\003\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\022\ufff1\024\ufff1\025\ufff1\030\ufff1\037\ufff1" +
    "\053\ufff1\054\ufff1\001\002\000\006\032\262\043\263\001" +
    "\002\000\044\003\253\004\101\006\067\007\uffe2\013\060" +
    "\014\uffe2\015\104\016\063\020\100\022\103\024\106\025" +
    "\077\026\251\030\071\037\uffe2\053\061\054\107\001\002" +
    "\000\042\003\102\004\101\006\067\007\uffe2\013\060\014" +
    "\uffe2\015\104\016\063\020\100\022\103\024\106\025\077" +
    "\030\071\037\uffe2\053\061\054\107\001\002\000\042\003" +
    "\102\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104" +
    "\016\063\020\100\022\103\024\106\025\077\030\071\037" +
    "\uffe2\053\061\054\107\001\002\000\042\003\102\004\101" +
    "\006\067\007\uffe2\013\060\014\uffe2\015\104\016\063\020" +
    "\100\022\103\024\106\025\077\030\071\037\uffe2\053\061" +
    "\054\107\001\002\000\004\041\244\001\002\000\004\032" +
    "\230\001\002\000\010\030\222\041\221\042\220\001\002" +
    "\000\042\003\102\004\101\006\067\007\uffe2\013\060\014" +
    "\uffe2\015\104\016\063\020\100\022\103\024\106\025\077" +
    "\030\071\037\uffe2\053\061\054\107\001\002\000\042\003" +
    "\102\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104" +
    "\016\063\020\100\022\103\024\106\025\077\030\071\037" +
    "\uffe2\053\061\054\107\001\002\000\004\032\160\001\002" +
    "\000\004\036\147\001\002\000\042\003\102\004\101\006" +
    "\067\007\uffe2\013\060\014\uffe2\015\104\016\063\020\100" +
    "\022\103\024\106\025\077\030\071\037\uffe2\053\061\054" +
    "\107\001\002\000\004\032\121\001\002\000\004\032\110" +
    "\001\002\000\006\030\112\033\uffa0\001\002\000\004\033" +
    "\117\001\002\000\006\012\115\033\uff9d\001\002\000\004" +
    "\033\uffa1\001\002\000\004\033\uff9f\001\002\000\004\030" +
    "\112\001\002\000\004\033\uff9e\001\002\000\004\041\120" +
    "\001\002\000\042\003\uff8d\004\uff8d\006\uff8d\007\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\022\uff8d\024\uff8d" +
    "\025\uff8d\030\uff8d\037\uff8d\053\uff8d\054\uff8d\001\002\000" +
    "\022\003\123\030\122\031\043\032\045\042\050\047\052" +
    "\050\042\051\047\001\002\000\024\027\136\033\uffad\041" +
    "\uffad\044\142\045\140\046\137\047\uffad\050\uffad\051\uffad" +
    "\001\002\000\004\033\132\001\002\000\004\033\126\001" +
    "\002\000\014\033\uffc7\041\uffc7\047\052\050\042\051\047" +
    "\001\002\000\004\036\127\001\002\000\036\003\102\004" +
    "\101\006\067\013\060\015\104\016\063\020\100\022\103" +
    "\024\106\025\077\030\071\037\uffe2\053\061\054\107\001" +
    "\002\000\004\037\131\001\002\000\042\003\uffbe\004\uffbe" +
    "\006\uffbe\007\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020" +
    "\uffbe\022\uffbe\024\uffbe\025\uffbe\030\uffbe\037\uffbe\053\uffbe" +
    "\054\uffbe\001\002\000\004\036\133\001\002\000\036\003" +
    "\102\004\101\006\067\013\060\015\104\016\063\020\100" +
    "\022\103\024\106\025\077\030\071\037\uffe2\053\061\054" +
    "\107\001\002\000\004\037\135\001\002\000\042\003\uffbd" +
    "\004\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\020\uffbd\022\uffbd\024\uffbd\025\uffbd\030\uffbd\037\uffbd" +
    "\053\uffbd\054\uffbd\001\002\000\022\003\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\042\uffc4\047\uffc4\050\uffc4\051\uffc4\001\002" +
    "\000\022\003\uffc1\030\uffc1\031\uffc1\032\uffc1\042\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\001\002\000\022\003\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\042\uffc3\047\uffc3\050\uffc3\051\uffc3\001" +
    "\002\000\022\003\143\030\046\031\043\032\045\042\050" +
    "\047\052\050\042\051\047\001\002\000\022\003\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\042\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\001\002\000\006\033\uffc5\041\uffc5\001\002\000\014\033" +
    "\uffc6\041\uffc6\047\052\050\042\051\047\001\002\000\010" +
    "\007\uffec\014\uffec\037\uffec\001\002\000\010\007\uffdf\014" +
    "\uffdf\037\uffdf\001\002\000\036\003\102\004\101\006\067" +
    "\013\060\015\104\016\063\020\100\022\103\024\106\025" +
    "\077\030\071\037\uffe2\053\061\054\107\001\002\000\004" +
    "\037\151\001\002\000\004\024\152\001\002\000\004\032" +
    "\153\001\002\000\022\003\154\030\122\031\043\032\045" +
    "\042\050\047\052\050\042\051\047\001\002\000\004\033" +
    "\157\001\002\000\004\033\156\001\002\000\004\041\uffbc" +
    "\001\002\000\004\041\uffbb\001\002\000\006\030\162\031" +
    "\161\001\002\000\004\033\uff80\001\002\000\006\033\uff7f" +
    "\043\214\001\002\000\004\033\164\001\002\000\004\036" +
    "\165\001\002\000\010\007\uff83\014\uff83\037\uff83\001\002" +
    "\000\010\007\167\014\170\037\uff88\001\002\000\006\003" +
    "\204\031\203\001\002\000\006\003\173\055\174\001\002" +
    "\000\004\037\172\001\002\000\042\003\uff8b\004\uff8b\006" +
    "\uff8b\007\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\020\uff8b" +
    "\022\uff8b\024\uff8b\025\uff8b\030\uff8b\037\uff8b\053\uff8b\054" +
    "\uff8b\001\002\000\040\003\102\004\101\006\067\013\060" +
    "\015\104\016\063\020\100\022\103\024\106\025\077\030" +
    "\071\036\177\037\uffe2\053\061\054\107\001\002\000\040" +
    "\003\102\004\101\006\067\013\060\015\104\016\063\020" +
    "\100\022\103\024\106\025\077\030\071\036\177\037\uffe2" +
    "\053\061\054\107\001\002\000\004\037\uff8a\001\002\000" +
    "\004\037\uff86\001\002\000\036\003\102\004\101\006\067" +
    "\013\060\015\104\016\063\020\100\022\103\024\106\025" +
    "\077\030\071\037\uffe2\053\061\054\107\001\002\000\004" +
    "\037\201\001\002\000\004\037\uff87\001\002\000\004\037" +
    "\uff89\001\002\000\004\055\212\001\002\000\044\003\102" +
    "\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104\016" +
    "\063\020\100\022\103\024\106\025\077\030\071\036\206" +
    "\037\uffe2\053\061\054\107\001\002\000\010\007\uff81\014" +
    "\uff81\037\uff81\001\002\000\036\003\102\004\101\006\067" +
    "\013\060\015\104\016\063\020\100\022\103\024\106\025" +
    "\077\030\071\037\uffe2\053\061\054\107\001\002\000\010" +
    "\007\uff84\014\uff84\037\uff84\001\002\000\004\037\211\001" +
    "\002\000\010\007\uff82\014\uff82\037\uff82\001\002\000\044" +
    "\003\102\004\101\006\067\007\uffe2\013\060\014\uffe2\015" +
    "\104\016\063\020\100\022\103\024\106\025\077\030\071" +
    "\036\206\037\uffe2\053\061\054\107\001\002\000\010\007" +
    "\uff85\014\uff85\037\uff85\001\002\000\004\031\215\001\002" +
    "\000\004\033\uff7e\001\002\000\010\007\uffe3\014\uffe3\037" +
    "\uffe3\001\002\000\010\007\uffe4\014\uffe4\037\uffe4\001\002" +
    "\000\004\041\226\001\002\000\042\003\uffdc\004\uffdc\006" +
    "\uffdc\007\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc" +
    "\022\uffdc\024\uffdc\025\uffdc\030\uffdc\037\uffdc\053\uffdc\054" +
    "\uffdc\001\002\000\004\041\225\001\002\000\042\003\102" +
    "\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104\016" +
    "\063\020\100\022\103\024\106\025\077\030\071\037\uffe2" +
    "\053\061\054\107\001\002\000\010\007\uffe6\014\uffe6\037" +
    "\uffe6\001\002\000\042\003\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\022\uffdb\024" +
    "\uffdb\025\uffdb\030\uffdb\037\uffdb\053\uffdb\054\uffdb\001\002" +
    "\000\042\003\102\004\101\006\067\007\uffe2\013\060\014" +
    "\uffe2\015\104\016\063\020\100\022\103\024\106\025\077" +
    "\030\071\037\uffe2\053\061\054\107\001\002\000\010\007" +
    "\uffe7\014\uffe7\037\uffe7\001\002\000\022\003\231\030\122" +
    "\031\043\032\045\042\050\047\052\050\042\051\047\001" +
    "\002\000\004\033\240\001\002\000\004\033\233\001\002" +
    "\000\006\003\235\036\234\001\002\000\036\003\102\004" +
    "\101\006\067\013\060\015\104\016\063\020\100\022\103" +
    "\024\106\025\077\030\071\037\uffe2\053\061\054\107\001" +
    "\002\000\044\003\uffc8\004\uffc8\006\uffc8\007\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\020\uffc8\022\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\030\uffc8\037\uffc8\053\uffc8\054\uffc8\001\002" +
    "\000\004\037\237\001\002\000\044\003\uffca\004\uffca\006" +
    "\uffca\007\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca" +
    "\022\uffca\024\uffca\025\uffca\026\uffca\030\uffca\037\uffca\053" +
    "\uffca\054\uffca\001\002\000\004\036\241\001\002\000\036" +
    "\003\102\004\101\006\067\013\060\015\104\016\063\020" +
    "\100\022\103\024\106\025\077\030\071\037\uffe2\053\061" +
    "\054\107\001\002\000\004\037\243\001\002\000\044\003" +
    "\uffc9\004\uffc9\006\uffc9\007\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\020\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\030" +
    "\uffc9\037\uffc9\053\uffc9\054\uffc9\001\002\000\042\003\102" +
    "\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104\016" +
    "\063\020\100\022\103\024\106\025\077\030\071\037\uffe2" +
    "\053\061\054\107\001\002\000\010\007\uffed\014\uffed\037" +
    "\uffed\001\002\000\010\007\uffeb\014\uffeb\037\uffeb\001\002" +
    "\000\010\007\uffef\014\uffef\037\uffef\001\002\000\010\007" +
    "\uffea\014\uffea\037\uffea\001\002\000\004\036\257\001\002" +
    "\000\010\007\ufff0\014\ufff0\037\ufff0\001\002\000\044\003" +
    "\102\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104" +
    "\016\063\020\100\022\103\024\106\025\077\030\071\036" +
    "\254\037\uffe2\053\061\054\107\001\002\000\036\003\102" +
    "\004\101\006\067\013\060\015\104\016\063\020\100\022" +
    "\103\024\106\025\077\030\071\037\uffe2\053\061\054\107" +
    "\001\002\000\004\037\256\001\002\000\042\003\uffbf\004" +
    "\uffbf\006\uffbf\007\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\020\uffbf\022\uffbf\024\uffbf\025\uffbf\030\uffbf\037\uffbf\053" +
    "\uffbf\054\uffbf\001\002\000\036\003\102\004\101\006\067" +
    "\013\060\015\104\016\063\020\100\022\103\024\106\025" +
    "\077\030\071\037\uffe2\053\061\054\107\001\002\000\004" +
    "\037\261\001\002\000\042\003\uffc0\004\uffc0\006\uffc0\007" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\022\uffc0" +
    "\024\uffc0\025\uffc0\030\uffc0\037\uffc0\053\uffc0\054\uffc0\001" +
    "\002\000\006\030\112\033\uffa0\001\002\000\024\003\265" +
    "\030\046\031\043\032\045\036\266\042\050\047\052\050" +
    "\042\051\047\001\002\000\004\041\276\001\002\000\004" +
    "\041\275\001\002\000\020\030\046\031\043\032\045\042" +
    "\050\047\052\050\042\051\047\001\002\000\012\041\uffce" +
    "\047\052\050\042\051\047\001\002\000\004\037\274\001" +
    "\002\000\014\012\272\037\uffcc\047\052\050\042\051\047" +
    "\001\002\000\020\030\046\031\043\032\045\042\050\047" +
    "\052\050\042\051\047\001\002\000\004\037\uffcb\001\002" +
    "\000\004\041\uffcd\001\002\000\042\003\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\022\uffe0\024\uffe0\025\uffe0\030\uffe0\037\uffe0\053\uffe0\054" +
    "\uffe0\001\002\000\042\003\uffe1\004\uffe1\006\uffe1\007\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\030\uffe1\037\uffe1\053\uffe1\054\uffe1\001\002" +
    "\000\004\033\300\001\002\000\004\041\301\001\002\000" +
    "\042\003\ufff2\004\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\020\ufff2\022\ufff2\024\ufff2\025\ufff2\030" +
    "\ufff2\037\ufff2\053\ufff2\054\ufff2\001\002\000\042\003\102" +
    "\004\101\006\067\007\uffe2\013\060\014\uffe2\015\104\016" +
    "\063\020\100\022\103\024\106\025\077\030\071\037\uffe2" +
    "\053\061\054\107\001\002\000\010\007\uffe5\014\uffe5\037" +
    "\uffe5\001\002\000\020\002\ufff8\005\ufff8\010\ufff8\011\ufff8" +
    "\017\ufff8\021\ufff8\023\ufff8\001\002\000\010\007\uffe9\014" +
    "\uffe9\037\uffe9\001\002\000\010\007\uffee\014\uffee\037\uffee" +
    "\001\002\000\020\003\313\005\013\010\012\017\014\021" +
    "\006\023\016\030\312\001\002\000\004\033\350\001\002" +
    "\000\004\030\341\001\002\000\004\043\333\001\002\000" +
    "\006\033\315\041\314\001\002\000\020\030\122\031\043" +
    "\032\045\042\050\047\052\050\042\051\047\001\002\000" +
    "\004\036\316\001\002\000\036\003\102\004\101\006\067" +
    "\013\060\015\104\016\063\020\100\022\103\024\106\025" +
    "\077\030\071\037\uffe2\053\061\054\107\001\002\000\004" +
    "\037\320\001\002\000\042\003\uffb8\004\uffb8\006\uffb8\007" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\022\uffb8" +
    "\024\uffb8\025\uffb8\030\uffb8\037\uffb8\053\uffb8\054\uffb8\001" +
    "\002\000\004\041\322\001\002\000\010\003\325\030\326" +
    "\052\323\001\002\000\004\030\332\001\002\000\004\033" +
    "\uffb4\001\002\000\004\033\uffb0\001\002\000\006\043\330" +
    "\052\327\001\002\000\004\033\uffb2\001\002\000\004\042" +
    "\331\001\002\000\004\033\uffb3\001\002\000\004\033\uffb1" +
    "\001\002\000\020\030\046\031\043\032\045\042\050\047" +
    "\052\050\042\051\047\001\002\000\012\041\335\047\052" +
    "\050\042\051\047\001\002\000\020\030\122\031\043\032" +
    "\045\042\050\047\052\050\042\051\047\001\002\000\004" +
    "\041\337\001\002\000\010\003\325\030\326\052\323\001" +
    "\002\000\004\033\uffb5\001\002\000\004\043\342\001\002" +
    "\000\020\030\046\031\043\032\045\042\050\047\052\050" +
    "\042\051\047\001\002\000\012\041\344\047\052\050\042" +
    "\051\047\001\002\000\020\030\122\031\043\032\045\042" +
    "\050\047\052\050\042\051\047\001\002\000\004\041\346" +
    "\001\002\000\010\003\325\030\326\052\323\001\002\000" +
    "\004\033\uffb6\001\002\000\006\003\352\036\351\001\002" +
    "\000\036\003\102\004\101\006\067\013\060\015\104\016" +
    "\063\020\100\022\103\024\106\025\077\030\071\037\uffe2" +
    "\053\061\054\107\001\002\000\036\003\102\004\101\006" +
    "\067\013\060\015\104\016\063\020\100\022\103\024\106" +
    "\025\077\030\071\037\uffe2\053\061\054\107\001\002\000" +
    "\004\037\354\001\002\000\042\003\uffb7\004\uffb7\006\uffb7" +
    "\007\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\022" +
    "\uffb7\024\uffb7\025\uffb7\030\uffb7\037\uffb7\053\uffb7\054\uffb7" +
    "\001\002\000\004\037\356\001\002\000\042\003\uffb9\004" +
    "\uffb9\006\uffb9\007\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\020\uffb9\022\uffb9\024\uffb9\025\uffb9\030\uffb9\037\uffb9\053" +
    "\uffb9\054\uffb9\001\002\000\010\007\uffe8\014\uffe8\037\uffe8" +
    "\001\002\000\004\030\112\001\002\000\004\033\362\001" +
    "\002\000\004\041\363\001\002\000\042\003\uff8c\004\uff8c" +
    "\006\uff8c\007\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020" +
    "\uff8c\022\uff8c\024\uff8c\025\uff8c\030\uff8c\037\uff8c\053\uff8c" +
    "\054\uff8c\001\002\000\042\003\uffba\004\uffba\006\uffba\007" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\020\uffba\022\uffba" +
    "\024\uffba\025\uffba\030\uffba\037\uffba\053\uffba\054\uffba\001" +
    "\002\000\004\030\366\001\002\000\006\034\370\043\371" +
    "\001\002\000\004\041\uffd1\001\002\000\022\030\046\031" +
    "\043\032\045\035\377\042\050\047\052\050\042\051\047" +
    "\001\002\000\022\003\375\030\046\031\043\032\045\042" +
    "\050\047\052\050\042\051\047\001\002\000\004\041\373" +
    "\001\002\000\052\003\uffd8\004\uffd8\005\013\006\uffd8\010" +
    "\012\011\030\013\uffd8\015\uffd8\016\uffd8\017\014\020\uffd8" +
    "\021\006\022\uffd8\023\016\024\uffd8\025\uffd8\030\uffd8\037" +
    "\uffd8\053\uffd8\054\uffd8\001\002\000\036\003\uffda\004\uffda" +
    "\006\uffda\013\uffda\015\uffda\016\uffda\020\uffda\022\uffda\024" +
    "\uffda\025\uffda\030\uffda\037\uffda\053\uffda\054\uffda\001\002" +
    "\000\004\041\uffcf\001\002\000\012\041\uffd0\047\052\050" +
    "\042\051\047\001\002\000\004\043\u0104\001\002\000\012" +
    "\035\u0101\047\052\050\042\051\047\001\002\000\004\043" +
    "\u0102\001\002\000\022\030\046\031\043\032\045\036\266" +
    "\042\050\047\052\050\042\051\047\001\002\000\004\041" +
    "\uffd3\001\002\000\022\030\046\031\043\032\045\036\266" +
    "\042\050\047\052\050\042\051\047\001\002\000\004\041" +
    "\uffd2\001\002\000\004\033\uffa6\001\002\000\004\033\u010d" +
    "\001\002\000\004\030\u0109\001\002\000\006\012\u010b\033" +
    "\uffa2\001\002\000\004\033\uffa4\001\002\000\014\005\013" +
    "\010\012\017\014\021\006\023\016\001\002\000\004\033" +
    "\uffa3\001\002\000\006\036\u010f\041\u010e\001\002\000\020" +
    "\002\ufff9\005\ufff9\010\ufff9\011\ufff9\017\ufff9\021\ufff9\023" +
    "\ufff9\001\002\000\052\003\uffd8\004\uffd8\005\013\006\uffd8" +
    "\010\012\011\030\013\uffd8\015\uffd8\016\uffd8\017\014\020" +
    "\uffd8\021\006\022\uffd8\023\016\024\uffd8\025\uffd8\030\uffd8" +
    "\037\uffd8\053\uffd8\054\uffd8\001\002\000\036\003\102\004" +
    "\101\006\067\013\060\015\104\016\063\020\100\022\103" +
    "\024\106\025\077\030\071\037\uffe2\053\061\054\107\001" +
    "\002\000\004\037\u0112\001\002\000\020\002\ufffa\005\ufffa" +
    "\010\ufffa\011\ufffa\017\ufffa\021\ufffa\023\ufffa\001\002\000" +
    "\004\033\u0114\001\002\000\006\003\u0116\036\u0115\001\002" +
    "\000\052\003\uffd8\004\uffd8\005\013\006\uffd8\010\012\011" +
    "\030\013\uffd8\015\uffd8\016\uffd8\017\014\020\uffd8\021\006" +
    "\022\uffd8\023\016\024\uffd8\025\uffd8\030\uffd8\037\uffd8\053" +
    "\uffd8\054\uffd8\001\002\000\004\037\u0117\001\002\000\004" +
    "\002\ufff4\001\002\000\036\003\102\004\101\006\067\013" +
    "\060\015\104\016\063\020\100\022\103\024\106\025\077" +
    "\030\071\037\uffe2\053\061\054\107\001\002\000\004\037" +
    "\u011a\001\002\000\004\002\ufff5\001\002\000\020\002\ufffd" +
    "\005\ufffd\010\ufffd\011\ufffd\017\ufffd\021\ufffd\023\ufffd\001" +
    "\002\000\010\003\uff92\030\uff92\040\uff92\001\002\000\012" +
    "\003\uff8e\005\u0120\030\uff8e\040\uff8e\001\002\000\010\003" +
    "\uff91\030\uff91\040\uff91\001\002\000\010\003\uff90\030\uff90" +
    "\040\uff90\001\002\000\010\003\uff8f\030\uff8f\040\uff8f\001" +
    "\002\000\006\003\u0122\030\u0123\001\002\000\006\034\370" +
    "\043\371\001\002\000\006\034\370\043\371\001\002\000" +
    "\004\041\u0125\001\002\000\020\002\000\005\000\010\000" +
    "\011\000\017\000\021\000\023\000\001\002\000\004\041" +
    "\u0127\001\002\000\020\002\ufffe\005\ufffe\010\ufffe\011\ufffe" +
    "\017\ufffe\021\ufffe\023\ufffe\001\002\000\010\003\uff97\030" +
    "\uff97\040\uff97\001\002\000\012\003\uff93\005\u012c\030\uff93" +
    "\040\uff93\001\002\000\010\003\uff96\030\uff96\040\uff96\001" +
    "\002\000\010\003\uff95\030\uff95\040\uff95\001\002\000\010" +
    "\003\uff94\030\uff94\040\uff94\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\006\002\003\042\004\001\001\000\002\001" +
    "\001\000\012\003\010\017\014\020\007\021\016\001\001" +
    "\000\004\046\u0127\001\001\000\010\017\u0120\020\007\021" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u011a\001\001\000\002\001\001\000\004\043\022\001" +
    "\001\000\002\001\001\000\014\015\u0105\017\u0107\020\007" +
    "\021\016\037\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\030\017\031\020\007\021\016\001\001" +
    "\000\010\017\364\020\007\021\016\001\001\000\030\005" +
    "\065\006\072\010\071\011\073\012\063\013\075\014\104" +
    "\044\064\052\061\053\067\060\074\001\001\000\002\001" +
    "\001\000\004\054\035\001\001\000\002\001\001\000\006" +
    "\022\050\027\040\001\001\000\002\001\001\000\012\007" +
    "\037\017\031\020\007\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\055\027\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\054\027\040\001\001\000\004\027\053\001\001\000" +
    "\004\027\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\145\006\072\010\071\011" +
    "\073\012\063\013\075\014\104\033\356\044\064\052\061" +
    "\053\067\060\074\001\001\000\002\001\001\000\032\005" +
    "\145\006\072\010\071\011\073\012\063\013\075\014\104" +
    "\033\305\044\064\052\061\053\067\060\074\001\001\000" +
    "\032\005\145\006\072\010\071\011\073\012\063\013\075" +
    "\014\104\033\304\044\064\052\061\053\067\060\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\145\006\072\010\071\011" +
    "\073\012\063\013\075\014\104\033\251\044\064\052\061" +
    "\053\067\060\074\001\001\000\032\005\145\006\072\010" +
    "\071\011\073\012\063\013\075\014\104\033\247\044\064" +
    "\052\061\053\067\060\074\001\001\000\032\005\145\006" +
    "\072\010\071\011\073\012\063\013\075\014\104\033\246" +
    "\044\064\052\061\053\067\060\074\001\001\000\032\005" +
    "\145\006\072\010\071\011\073\012\063\013\075\014\104" +
    "\033\245\044\064\052\061\053\067\060\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\222\001\001" +
    "\000\030\005\216\006\072\010\071\011\073\012\063\013" +
    "\075\014\104\044\064\052\061\053\067\060\074\001\001" +
    "\000\032\005\145\006\072\010\071\011\073\012\063\013" +
    "\075\014\104\033\215\044\064\052\061\053\067\060\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\145\006\072\010\071\011\073\012\063\013\075\014\104" +
    "\033\144\044\064\052\061\053\067\060\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\112\040\110" +
    "\001\001\000\002\001\001\000\004\034\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\124\023\123\027\040\001\001\000\004\030\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\053\001\001\000\002\001\001\000\030\005\127\006\072" +
    "\010\071\011\073\012\063\013\075\014\104\044\064\052" +
    "\061\053\067\060\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\133\006\072\010" +
    "\071\011\073\012\063\013\075\014\104\044\064\052\061" +
    "\053\067\060\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\143\027\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\147\006\072\010\071\011" +
    "\073\012\063\013\075\014\104\044\064\052\061\053\067" +
    "\060\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\124\023\154\027\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\165\001\001\000\004\061\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\175\006\072\010\071\011\073\012\063" +
    "\013\075\014\104\044\064\052\061\053\067\060\074\062" +
    "\201\001\001\000\032\005\175\006\072\010\071\011\073" +
    "\012\063\013\075\014\104\044\064\052\061\053\067\060" +
    "\074\062\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\177\006\072\010\071\011\073\012\063\013" +
    "\075\014\104\044\064\052\061\053\067\060\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\204\006\072\010\071\011\073" +
    "\012\063\013\075\014\104\044\064\052\061\053\067\060" +
    "\074\064\206\001\001\000\002\001\001\000\030\005\207" +
    "\006\072\010\071\011\073\012\063\013\075\014\104\044" +
    "\064\052\061\053\067\060\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\204\006" +
    "\072\010\071\011\073\012\063\013\075\014\104\044\064" +
    "\052\061\053\067\060\074\064\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\145\006\072\010\071\011\073" +
    "\012\063\013\075\014\104\033\223\044\064\052\061\053" +
    "\067\060\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\145\006\072\010\071\011\073\012\063\013" +
    "\075\014\104\033\226\044\064\052\061\053\067\060\074" +
    "\001\001\000\002\001\001\000\010\022\124\023\231\027" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\235\006\072\010\071\011\073\012" +
    "\063\013\075\014\104\044\064\052\061\053\067\060\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\241\006\072\010\071" +
    "\011\073\012\063\013\075\014\104\044\064\052\061\053" +
    "\067\060\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\145\006\072\010\071\011\073\012\063\013" +
    "\075\014\104\033\244\044\064\052\061\053\067\060\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\145\006\072\010\071\011\073\012\063\013" +
    "\075\014\104\033\215\044\064\052\061\053\067\060\074" +
    "\001\001\000\030\005\254\006\072\010\071\011\073\012" +
    "\063\013\075\014\104\044\064\052\061\053\067\060\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\257\006\072\010\071\011\073\012\063\013\075\014\104" +
    "\044\064\052\061\053\067\060\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\112\040\276\001\001" +
    "\000\010\022\266\027\040\055\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\270\027\040\057\267" +
    "\001\001\000\004\027\053\001\001\000\002\001\001\000" +
    "\004\027\053\001\001\000\010\022\270\027\040\057\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\145\006\072\010\071\011" +
    "\073\012\063\013\075\014\104\033\302\044\064\052\061" +
    "\053\067\060\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\310" +
    "\020\007\021\016\025\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\124\023\320\027\040\001\001\000\002\001\001\000" +
    "\030\005\316\006\072\010\071\011\073\012\063\013\075" +
    "\014\104\044\064\052\061\053\067\060\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\333\027\040\001\001\000\004\027\053\001\001\000\010" +
    "\022\124\023\335\027\040\001\001\000\002\001\001\000" +
    "\004\026\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\342\027\040\001\001\000\004\027\053\001" +
    "\001\000\010\022\124\023\344\027\040\001\001\000\002" +
    "\001\001\000\004\026\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\354\006\072\010\071\011\073" +
    "\012\063\013\075\014\104\044\064\052\061\053\067\060" +
    "\074\001\001\000\030\005\352\006\072\010\071\011\073" +
    "\012\063\013\075\014\104\044\064\052\061\053\067\060" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\366\066\371\001\001\000\002\001\001\000\006\022\377" +
    "\027\040\001\001\000\006\022\375\027\040\001\001\000" +
    "\002\001\001\000\012\007\373\017\031\020\007\021\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\053\001\001\000\002\001\001\000\004\027\053\001\001" +
    "\000\002\001\001\000\010\022\266\027\040\055\u0102\001" +
    "\001\000\002\001\001\000\010\022\266\027\040\055\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0109\001\001\000\002" +
    "\001\001\000\012\015\u010b\017\u0107\020\007\021\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\u010f\017\031\020\007\021\016\001\001\000" +
    "\030\005\u0110\006\072\010\071\011\073\012\063\013\075" +
    "\014\104\044\064\052\061\053\067\060\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u0117\017\031\020\007\021\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\u0118" +
    "\006\072\010\071\011\073\012\063\013\075\014\104\044" +
    "\064\052\061\053\067\060\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\366\066" +
    "\u0125\001\001\000\006\032\366\066\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();


    public void syntax_error(Symbol cur_token){
	System.err.println("Error de sintaxis en la linea: " + (cur_token.right+1) + " en el caracter numero: " + (cur_token.left+1) + " Token: " + cur_token.value);
        this.errores.add("Error de sintaxis en la linea: " + (cur_token.right+1) + " en el caracter numero: " + (cur_token.left+1) + " Token: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Error fatal en la linea: " + (cur_token.right+1) + " en el caracter numero: " + (cur_token.left+1) + " Token: " + cur_token.value);
        this.errores.add("Error fatal en la linea: " + (cur_token.right+1) + " en el caracter numero: " + (cur_token.left+1) + " Token: " + cur_token.value);
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Sintax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPTIONS ::= Identificador Asignacion Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPTIONS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPTIONS ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTIONS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_OPTIONS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASE_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASE_AUX ::= CASE_AUX Case error CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE_AUX ::= CASE_AUX Case Literal Dos_puntos CASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_AUX",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DEFAULT_OPTIONS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DEFAULT_OPTIONS ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_OPTIONS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DEFAULT_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DEFAULT_AUX ::= Default error DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DEFAULT_AUX ::= Default Dos_puntos DEFAULT_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT_AUX",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SW ::= Switch Parentesis_a OPTIONS Parentesis_c Llave_a CASE_AUX DEFAULT_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SW",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LANG_FUNCS ::= Write Parentesis_a PARAMS_LL Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LANG_FUNCS ::= Read Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LANG_FUNCS",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LONG_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LONG_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX_AUX",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LONG_AUX ::= Long LONG_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LONG_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG_AUX",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LONG ::= Long LONG_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LONG",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SHORT_AUX_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SHORT_AUX_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX_AUX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SHORT_AUX ::= Short SHORT_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SHORT_AUX ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT_AUX",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SHORT ::= Short SHORT_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SHORT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO ::= Void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMS_LL_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMS_LL_AUX ::= Coma PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_AUX",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMS_LL ::= Identificador PARAMS_LL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMS_LL_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMS_LL_PREV ::= PARAMS_LL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_LL_PREV",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMS_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMS_AUX ::= Coma PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_AUX",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMS ::= TIPO Identificador PARAMS_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMS_PREV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMS_PREV ::= PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS_PREV",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR ::= Timesslash 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP OPERADOR EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_FOR ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION_FOR ::= Unarios Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_FOR ::= Identificador Unarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_FOR ::= Identificador Asignacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_FOR ::= error Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_FOR ::= Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_FOR ::= TIPO Identificador Asignacion EXP Scolon SENTENCIA_BOOLEANA Scolon DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR ::= For Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTINUE ::= Continue Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUE",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= While Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF_ELSE ::= IF error Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_RELACIONALES ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_RELACIONALES ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_RELACIONALES ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_RELACIONALES ::= Relacionales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador OP_RELACIONALES EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= If Parentesis_a error Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAY_EXP_AUX ::= EXP Coma ARRAY_EXP_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARRAY_EXP_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_EXP_AUX",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARRAY_AUX_AUX ::= Llave_a ARRAY_EXP_AUX Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARRAY_AUX_AUX ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_AUX",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_VAR_AUX ::= Asignacion error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_VAR_AUX ::= Asignacion EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR_AUX",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRAY_AUX_CONST ::= DECLARACION_VAR_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARRAY_AUX_CONST ::= Corchete_a Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARRAY_AUX_CONST ::= Corchete_a EXP Corchete_c Asignacion ARRAY_AUX_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX_CONST",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRAY_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARRAY_AUX ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARRAY_AUX ::= Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRAY_AUX ::= Corchete_a EXP Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY_AUX",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VAR ::= TIPO Identificador ARRAY_AUX Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_VAR ::= Const TIPO Identificador ARRAY_AUX_CONST Scolon DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETURN_AUX_OPTIONS ::= Identificador Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETURN_AUX_OPTIONS ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_AUX_OPTIONS",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONST_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONST_AUX ::= Const 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONST_AUX",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECL_AUX ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_AUX",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION_VAR ::= Identificador Asignacion error Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION_VAR ::= Identificador Asignacion ARRAY_AUX_AUX Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= error DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= Break Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= Return RETURN_AUX_OPTIONS DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= Return Numero Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= CONTINUE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ASIGNACION_VAR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= LLAMADA_FUNCION DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SW DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= FOR DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DO_WHILE Scolon DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= WHILE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF_ELSE DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF DECL_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA_FUNCION ::= LANG_FUNCS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LLAMADA_FUNCION ::= Identificador Parentesis_a PARAMS_LL_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MAIN ::= TIPO Main Parentesis_a Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAIN ::= TIPO Main Parentesis_a Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= DECLARACIONES_INICIALES MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES_INICIALES_AUX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES_INICIALES_AUX ::= error Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES_INICIALES_AUX ::= Parentesis_a PARAMS_PREV Parentesis_c Llave_a DECLARACION_VAR SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES_INICIALES_AUX ::= Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES_INICIALES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO error DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO error ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES TIPO Identificador DECLARACIONES_INICIALES_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DECLARACIONES_INICIALES ::= DECLARACIONES_INICIALES Const TIPO Identificador ARRAY_AUX_CONST Scolon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_INICIALES",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

